=begin
#ESP Documentation

#No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module ESP
  # A(n) Suppression object
  class Suppression < BaseObject
    # Links to Associated Objects
    attr_accessor :relationships

    # Array of error messages if the request failed
    attr_accessor :errors

    # Unique ID
    attr_accessor :id

    # ISO 8601 timestamp when the resource was created
    attr_accessor :created_at

    # The reason for the suppresion
    attr_accessor :reason

    # The resource string this suppression will suppress alerts for
    attr_accessor :resource

    # The status of this suppresion
    attr_accessor :status

    # Type of suppression. Possible values are unique_identifiers, regions, and signatures
    attr_accessor :suppression_type

    # ISO 8601 timestamp when the suppression was last updated
    attr_accessor :updated_at

    # Associated Organization
    attr_accessor :organization

    # Associated Organization Id
    attr_accessor :organization_id

    # User That Created This Suppression
    attr_accessor :created_by

    # User That Created This Suppression's Id
    attr_accessor :created_by_id

    # Associated External Accounts
    attr_accessor :external_accounts

    # Associated External Account Ids
    attr_accessor :external_account_ids

    # Associated Regions
    attr_accessor :regions

    # Associated Region Ids
    attr_accessor :region_ids

    # Associated Signatures
    attr_accessor :signatures

    # Associated Signature Ids
    attr_accessor :signature_ids

    # Associated Custom Signatures
    attr_accessor :custom_signatures

    # Associated Custom Signature Ids
    attr_accessor :custom_signature_ids


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'relationships' => :'relationships',
        :'errors' => :'errors',
        :'id' => :'id',
        :'created_at' => :'created_at',
        :'reason' => :'reason',
        :'resource' => :'resource',
        :'status' => :'status',
        :'suppression_type' => :'suppression_type',
        :'updated_at' => :'updated_at',
        :'organization' => :'organization',
        :'organization_id' => :'organization_id',
        :'created_by' => :'created_by',
        :'created_by_id' => :'created_by_id',
        :'external_accounts' => :'external_accounts',
        :'external_account_ids' => :'external_account_ids',
        :'regions' => :'regions',
        :'region_ids' => :'region_ids',
        :'signatures' => :'signatures',
        :'signature_ids' => :'signature_ids',
        :'custom_signatures' => :'custom_signatures',
        :'custom_signature_ids' => :'custom_signature_ids'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'relationships' => :'Object',
        :'errors' => :'Array<String>',
        :'id' => :'Integer',
        :'created_at' => :'DateTime',
        :'reason' => :'String',
        :'resource' => :'String',
        :'status' => :'String',
        :'suppression_type' => :'String',
        :'updated_at' => :'DateTime',
        :'organization' => :'Organization',
        :'organization_id' => :'Integer',
        :'created_by' => :'Array<Object>',
        :'created_by_id' => :'Integer',
        :'external_accounts' => :'Array<ExternalAccount>',
        :'external_account_ids' => :'Array<Integer>',
        :'regions' => :'Array<Region>',
        :'region_ids' => :'Array<Integer>',
        :'signatures' => :'Array<Signature>',
        :'signature_ids' => :'Array<Integer>',
        :'custom_signatures' => :'Array<CustomSignature>',
        :'custom_signature_ids' => :'Array<Integer>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'relationships')
        self.relationships = attributes[:'relationships']
      end

      if attributes.has_key?(:'errors')
        if (value = attributes[:'errors']).is_a?(Array)
          self.errors = value
        end
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'reason')
        self.reason = attributes[:'reason']
      end

      if attributes.has_key?(:'resource')
        self.resource = attributes[:'resource']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'suppression_type')
        self.suppression_type = attributes[:'suppression_type']
      end

      if attributes.has_key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.has_key?(:'organization')
        self.organization = attributes[:'organization']
      end

      if attributes.has_key?(:'organization_id')
        self.organization_id = attributes[:'organization_id']
      end

      if attributes.has_key?(:'created_by')
        if (value = attributes[:'created_by']).is_a?(Array)
          self.created_by = value
        end
      end

      if attributes.has_key?(:'created_by_id')
        self.created_by_id = attributes[:'created_by_id']
      end

      if attributes.has_key?(:'external_accounts')
        if (value = attributes[:'external_accounts']).is_a?(Array)
          self.external_accounts = value
        end
      end

      if attributes.has_key?(:'external_account_ids')
        if (value = attributes[:'external_account_ids']).is_a?(Array)
          self.external_account_ids = value
        end
      end

      if attributes.has_key?(:'regions')
        if (value = attributes[:'regions']).is_a?(Array)
          self.regions = value
        end
      end

      if attributes.has_key?(:'region_ids')
        if (value = attributes[:'region_ids']).is_a?(Array)
          self.region_ids = value
        end
      end

      if attributes.has_key?(:'signatures')
        if (value = attributes[:'signatures']).is_a?(Array)
          self.signatures = value
        end
      end

      if attributes.has_key?(:'signature_ids')
        if (value = attributes[:'signature_ids']).is_a?(Array)
          self.signature_ids = value
        end
      end

      if attributes.has_key?(:'custom_signatures')
        if (value = attributes[:'custom_signatures']).is_a?(Array)
          self.custom_signatures = value
        end
      end

      if attributes.has_key?(:'custom_signature_ids')
        if (value = attributes[:'custom_signature_ids']).is_a?(Array)
          self.custom_signature_ids = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push("invalid value for 'id', id cannot be nil.")
      end

      if @created_at.nil?
        invalid_properties.push("invalid value for 'created_at', created_at cannot be nil.")
      end

      if @reason.nil?
        invalid_properties.push("invalid value for 'reason', reason cannot be nil.")
      end

      if @resource.nil?
        invalid_properties.push("invalid value for 'resource', resource cannot be nil.")
      end

      if @status.nil?
        invalid_properties.push("invalid value for 'status', status cannot be nil.")
      end

      if @suppression_type.nil?
        invalid_properties.push("invalid value for 'suppression_type', suppression_type cannot be nil.")
      end

      if @updated_at.nil?
        invalid_properties.push("invalid value for 'updated_at', updated_at cannot be nil.")
      end

      if @organization.nil?
        invalid_properties.push("invalid value for 'organization', organization cannot be nil.")
      end

      if @organization_id.nil?
        invalid_properties.push("invalid value for 'organization_id', organization_id cannot be nil.")
      end

      if @created_by_id.nil?
        invalid_properties.push("invalid value for 'created_by_id', created_by_id cannot be nil.")
      end

      if @external_accounts.nil?
        invalid_properties.push("invalid value for 'external_accounts', external_accounts cannot be nil.")
      end

      if @external_account_ids.nil?
        invalid_properties.push("invalid value for 'external_account_ids', external_account_ids cannot be nil.")
      end

      if @regions.nil?
        invalid_properties.push("invalid value for 'regions', regions cannot be nil.")
      end

      if @region_ids.nil?
        invalid_properties.push("invalid value for 'region_ids', region_ids cannot be nil.")
      end

      if @signatures.nil?
        invalid_properties.push("invalid value for 'signatures', signatures cannot be nil.")
      end

      if @signature_ids.nil?
        invalid_properties.push("invalid value for 'signature_ids', signature_ids cannot be nil.")
      end

      if @custom_signatures.nil?
        invalid_properties.push("invalid value for 'custom_signatures', custom_signatures cannot be nil.")
      end

      if @custom_signature_ids.nil?
        invalid_properties.push("invalid value for 'custom_signature_ids', custom_signature_ids cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @created_at.nil?
      return false if @reason.nil?
      return false if @resource.nil?
      return false if @status.nil?
      return false if @suppression_type.nil?
      return false if @updated_at.nil?
      return false if @organization.nil?
      return false if @organization_id.nil?
      return false if @created_by_id.nil?
      return false if @external_accounts.nil?
      return false if @external_account_ids.nil?
      return false if @regions.nil?
      return false if @region_ids.nil?
      return false if @signatures.nil?
      return false if @signature_ids.nil?
      return false if @custom_signatures.nil?
      return false if @custom_signature_ids.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          relationships == o.relationships &&
          errors == o.errors &&
          id == o.id &&
          created_at == o.created_at &&
          reason == o.reason &&
          resource == o.resource &&
          status == o.status &&
          suppression_type == o.suppression_type &&
          updated_at == o.updated_at &&
          organization == o.organization &&
          organization_id == o.organization_id &&
          created_by == o.created_by &&
          created_by_id == o.created_by_id &&
          external_accounts == o.external_accounts &&
          external_account_ids == o.external_account_ids &&
          regions == o.regions &&
          region_ids == o.region_ids &&
          signatures == o.signatures &&
          signature_ids == o.signature_ids &&
          custom_signatures == o.custom_signatures &&
          custom_signature_ids == o.custom_signature_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [relationships, errors, id, created_at, reason, resource, status, suppression_type, updated_at, organization, organization_id, created_by, created_by_id, external_accounts, external_account_ids, regions, region_ids, signatures, signature_ids, custom_signatures, custom_signature_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ESP.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
