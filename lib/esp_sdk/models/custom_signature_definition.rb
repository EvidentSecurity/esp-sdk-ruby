=begin
#ESP Documentation

#No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module ESP

  class CustomSignatureDefinition < BaseObject
    # Unique ID
    attr_accessor :id

    # The code used for this result
    attr_accessor :code

    # ISO 8601 timestamp when the resource was created
    attr_accessor :created_at

    # Error messages that occurred while running the code
    attr_accessor :error_messages

    # The language of the code
    attr_accessor :language

    # Status of the result
    attr_accessor :status

    # ISO 8601 timestamp when the resource was last updated
    attr_accessor :updated_at

    # Associated Custom Signature Definition
    attr_accessor :definition

    # Associated Custom Signature Definition Id
    attr_accessor :definition_id

    # Associated Region
    attr_accessor :region

    # Associated Region Id
    attr_accessor :region_id

    # Associated External Account
    attr_accessor :external_account

    # Associated External Account Id
    attr_accessor :external_account_id

    # Associated Alerts
    attr_accessor :alerts

    # Associated Alert Ids
    attr_accessor :alert_ids


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'code' => :'code',
        :'created_at' => :'created_at',
        :'error_messages' => :'error_messages',
        :'language' => :'language',
        :'status' => :'status',
        :'updated_at' => :'updated_at',
        :'definition' => :'definition',
        :'definition_id' => :'definition_id',
        :'region' => :'region',
        :'region_id' => :'region_id',
        :'external_account' => :'external_account',
        :'external_account_id' => :'external_account_id',
        :'alerts' => :'alerts',
        :'alert_ids' => :'alert_ids'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'code' => :'String',
        :'created_at' => :'DateTime',
        :'error_messages' => :'Array<String>',
        :'language' => :'String',
        :'status' => :'String',
        :'updated_at' => :'DateTime',
        :'definition' => :'CustomSignatureDefinition',
        :'definition_id' => :'Integer',
        :'region' => :'Region',
        :'region_id' => :'Integer',
        :'external_account' => :'ExternalAccount',
        :'external_account_id' => :'Integer',
        :'alerts' => :'Array<Alert>',
        :'alert_ids' => :'Array<Integer>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'error_messages')
        if (value = attributes[:'error_messages']).is_a?(Array)
          self.error_messages = value
        end
      end

      if attributes.has_key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.has_key?(:'definition')
        self.definition = attributes[:'definition']
      end

      if attributes.has_key?(:'definition_id')
        self.definition_id = attributes[:'definition_id']
      end

      if attributes.has_key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.has_key?(:'region_id')
        self.region_id = attributes[:'region_id']
      end

      if attributes.has_key?(:'external_account')
        self.external_account = attributes[:'external_account']
      end

      if attributes.has_key?(:'external_account_id')
        self.external_account_id = attributes[:'external_account_id']
      end

      if attributes.has_key?(:'alerts')
        if (value = attributes[:'alerts']).is_a?(Array)
          self.alerts = value
        end
      end

      if attributes.has_key?(:'alert_ids')
        if (value = attributes[:'alert_ids']).is_a?(Array)
          self.alert_ids = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          code == o.code &&
          created_at == o.created_at &&
          error_messages == o.error_messages &&
          language == o.language &&
          status == o.status &&
          updated_at == o.updated_at &&
          definition == o.definition &&
          definition_id == o.definition_id &&
          region == o.region &&
          region_id == o.region_id &&
          external_account == o.external_account &&
          external_account_id == o.external_account_id &&
          alerts == o.alerts &&
          alert_ids == o.alert_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, code, created_at, error_messages, language, status, updated_at, definition, definition_id, region, region_id, external_account, external_account_id, alerts, alert_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ESP.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
