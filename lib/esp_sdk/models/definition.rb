=begin
#ESP Documentation

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module ESP
  # A(n) Definition object
  class Definition < BaseObject
    # Links to Associated Objects
    attr_accessor :relationships

    # Array of error messages if the request failed
    attr_accessor :errors

    # Unique ID
    attr_accessor :id

    # The code for this definition
    attr_accessor :code

    # ISO 8601 timestamp when the resource was created
    attr_accessor :created_at

    # The language of the definition
    attr_accessor :language

    # Version of definition
    attr_accessor :version_number

    # Status of the definition
    attr_accessor :status

    # ISO 8601 timestamp when the resource was last updated
    attr_accessor :updated_at

    # Associated Custom Signature 
    attr_accessor :custom_signature

    # Associated Custom Signature Id
    attr_accessor :custom_signature_id

    # Associated Custom Signatures
    attr_accessor :results

    # Associated Custom Signature Ids
    attr_accessor :result_ids


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'relationships' => :'relationships',
        :'errors' => :'errors',
        :'id' => :'id',
        :'code' => :'code',
        :'created_at' => :'created_at',
        :'language' => :'language',
        :'version_number' => :'version_number',
        :'status' => :'status',
        :'updated_at' => :'updated_at',
        :'custom_signature' => :'custom_signature',
        :'custom_signature_id' => :'custom_signature_id',
        :'results' => :'results',
        :'result_ids' => :'result_ids'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'relationships' => :'Object',
        :'errors' => :'Array<String>',
        :'id' => :'Integer',
        :'code' => :'String',
        :'created_at' => :'DateTime',
        :'language' => :'String',
        :'version_number' => :'Integer',
        :'status' => :'String',
        :'updated_at' => :'DateTime',
        :'custom_signature' => :'CustomSignature',
        :'custom_signature_id' => :'Integer',
        :'results' => :'Array<CustomSignatureResult>',
        :'result_ids' => :'Array<Integer>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'relationships')
        self.relationships = attributes[:'relationships']
      end

      if attributes.has_key?(:'errors')
        if (value = attributes[:'errors']).is_a?(Array)
          self.errors = value
        end
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.has_key?(:'version_number')
        self.version_number = attributes[:'version_number']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.has_key?(:'custom_signature')
        self.custom_signature = attributes[:'custom_signature']
      end

      if attributes.has_key?(:'custom_signature_id')
        self.custom_signature_id = attributes[:'custom_signature_id']
      end

      if attributes.has_key?(:'results')
        if (value = attributes[:'results']).is_a?(Array)
          self.results = value
        end
      end

      if attributes.has_key?(:'result_ids')
        if (value = attributes[:'result_ids']).is_a?(Array)
          self.result_ids = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          relationships == o.relationships &&
          errors == o.errors &&
          id == o.id &&
          code == o.code &&
          created_at == o.created_at &&
          language == o.language &&
          version_number == o.version_number &&
          status == o.status &&
          updated_at == o.updated_at &&
          custom_signature == o.custom_signature &&
          custom_signature_id == o.custom_signature_id &&
          results == o.results &&
          result_ids == o.result_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [relationships, errors, id, code, created_at, language, version_number, status, updated_at, custom_signature, custom_signature_id, results, result_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ESP.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
