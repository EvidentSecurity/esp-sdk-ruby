=begin
#ESP Documentation

#The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

OpenAPI spec version: v2_sdk

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ESP
  class CustomSignatureDefinitionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Activate a Custom Signature Definition
    # A successful call to this API marks the definition for activation.  The definition will go into the 'validating' state and will be tested before activating. The definition must have a status of editable to be activated.
    # @param custom_signature_definition_id ID of Custom Signature Definition
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  custom_signature, results See Including Objects for more information.
    # @return [CustomSignatureDefinition]
    def activate(custom_signature_definition_id, opts = {})
      data, _status_code, _headers = activate_with_http_info(custom_signature_definition_id, opts)
      return data
    end

    # Activate a Custom Signature Definition
    # A successful call to this API marks the definition for activation.  The definition will go into the &#39;validating&#39; state and will be tested before activating. The definition must have a status of editable to be activated.
    # @param custom_signature_definition_id ID of Custom Signature Definition
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  custom_signature, results See Including Objects for more information.
    # @return [Array<(CustomSignatureDefinition, Fixnum, Hash)>] CustomSignatureDefinition data, response status code and response headers
    def activate_with_http_info(custom_signature_definition_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignatureDefinitionsApi.activate ..."
      end
      # verify the required parameter 'custom_signature_definition_id' is set
      fail ArgumentError, "Missing the required parameter 'custom_signature_definition_id' when calling CustomSignatureDefinitionsApi.activate" if custom_signature_definition_id.nil?
      # resource path
      local_var_path = "/api/v2/custom_signature_definitions/{custom_signature_definition_id}/activate.json_api".sub('{format}','json_api').sub('{' + 'custom_signature_definition_id' + '}', custom_signature_definition_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomSignatureDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignatureDefinitionsApi#activate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Archive a Custom Signature Definition
    # A successful call to this API archives and returns a specific custom signature definition identified by the id parameter. The definition must have a status of active to be archived.
    # @param custom_signature_definition_id ID of Custom Signature Definition
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  custom_signature, results See Including Objects for more information.
    # @return [CustomSignatureDefinition]
    def archive(custom_signature_definition_id, opts = {})
      data, _status_code, _headers = archive_with_http_info(custom_signature_definition_id, opts)
      return data
    end

    # Archive a Custom Signature Definition
    # A successful call to this API archives and returns a specific custom signature definition identified by the id parameter. The definition must have a status of active to be archived.
    # @param custom_signature_definition_id ID of Custom Signature Definition
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  custom_signature, results See Including Objects for more information.
    # @return [Array<(CustomSignatureDefinition, Fixnum, Hash)>] CustomSignatureDefinition data, response status code and response headers
    def archive_with_http_info(custom_signature_definition_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignatureDefinitionsApi.archive ..."
      end
      # verify the required parameter 'custom_signature_definition_id' is set
      fail ArgumentError, "Missing the required parameter 'custom_signature_definition_id' when calling CustomSignatureDefinitionsApi.archive" if custom_signature_definition_id.nil?
      # resource path
      local_var_path = "/api/v2/custom_signature_definitions/{custom_signature_definition_id}/archive.json_api".sub('{format}','json_api').sub('{' + 'custom_signature_definition_id' + '}', custom_signature_definition_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomSignatureDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignatureDefinitionsApi#archive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a(n) Custom Signature Definition
    # 
    # @param custom_signature_id ID of the custom signature this definition belongs to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  custom_signature, results See Including Objects for more information.
    # @return [CustomSignatureDefinition]
    def create(custom_signature_id, opts = {})
      data, _status_code, _headers = create_with_http_info(custom_signature_id, opts)
      return data
    end

    # Create a(n) Custom Signature Definition
    # 
    # @param custom_signature_id ID of the custom signature this definition belongs to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  custom_signature, results See Including Objects for more information.
    # @return [Array<(CustomSignatureDefinition, Fixnum, Hash)>] CustomSignatureDefinition data, response status code and response headers
    def create_with_http_info(custom_signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignatureDefinitionsApi.create ..."
      end
      # verify the required parameter 'custom_signature_id' is set
      fail ArgumentError, "Missing the required parameter 'custom_signature_id' when calling CustomSignatureDefinitionsApi.create" if custom_signature_id.nil?
      # resource path
      local_var_path = "/api/v2/custom_signature_definitions.json_api".sub('{format}','json_api')

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["custom_signature_id"] = custom_signature_id

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomSignatureDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignatureDefinitionsApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a(n) Custom Signature Definition
    # 
    # @param id  ID
    # @param [Hash] opts the optional parameters
    # @return [Meta]
    def delete(id, opts = {})
      data, _status_code, _headers = delete_with_http_info(id, opts)
      return data
    end

    # Delete a(n) Custom Signature Definition
    # 
    # @param id  ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Meta, Fixnum, Hash)>] Meta data, response status code and response headers
    def delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignatureDefinitionsApi.delete ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomSignatureDefinitionsApi.delete" if id.nil?
      # resource path
      local_var_path = "/api/v2/custom_signature_definitions/{id}.json_api".sub('{format}','json_api').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Meta')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignatureDefinitionsApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Custom Signature Definitions
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :filter Filter Params for Searching.  Equality Searchable Attributes: [id, language, status, version_number]    Searchable Association: [custom_signature] See Searching Lists for more information. See the filter parameter of the association&#39;s list action to see what attributes are searchable on each association. See Conditions on Relationships in Searching Lists for more information.
    # @option opts [String] :page Page Number and Page Size.  number is the page number of the collection to return, size is the number of items to return per page (default to {:number=>1,+:size=>20})
    # @option opts [String] :include Related objects that can be included in the response:  custom_signature, results See Including Objects for more information.
    # @return [PaginatedCollection]
    def list(opts = {})
      data, _status_code, _headers = list_with_http_info(opts)
      return data
    end

    # Get a list of Custom Signature Definitions
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :filter Filter Params for Searching.  Equality Searchable Attributes: [id, language, status, version_number]    Searchable Association: [custom_signature] See Searching Lists for more information. See the filter parameter of the association&#39;s list action to see what attributes are searchable on each association. See Conditions on Relationships in Searching Lists for more information.
    # @option opts [String] :page Page Number and Page Size.  number is the page number of the collection to return, size is the number of items to return per page
    # @option opts [String] :include Related objects that can be included in the response:  custom_signature, results See Including Objects for more information.
    # @return [Array<(PaginatedCollection, Fixnum, Hash)>] PaginatedCollection data, response status code and response headers
    def list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignatureDefinitionsApi.list ..."
      end
      # resource path
      local_var_path = "/api/v2/custom_signature_definitions.json_api".sub('{format}','json_api')

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["filter"] = opts[:'filter'] if !opts[:'filter'].nil?
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignatureDefinitionsApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show a single Custom Signature Definition
    # 
    # @param id Custom Signature Definition ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  custom_signature, results See Including Objects for more information.
    # @return [CustomSignatureDefinition]
    def show(id, opts = {})
      data, _status_code, _headers = show_with_http_info(id, opts)
      return data
    end

    # Show a single Custom Signature Definition
    # 
    # @param id Custom Signature Definition ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  custom_signature, results See Including Objects for more information.
    # @return [Array<(CustomSignatureDefinition, Fixnum, Hash)>] CustomSignatureDefinition data, response status code and response headers
    def show_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignatureDefinitionsApi.show ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomSignatureDefinitionsApi.show" if id.nil?
      # resource path
      local_var_path = "/api/v2/custom_signature_definitions/{id}.json_api".sub('{format}','json_api').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomSignatureDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignatureDefinitionsApi#show\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a(n) Custom Signature Definition
    # 
    # @param id Custom Signature Definition ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code The code for this definition
    # @option opts [String] :language The language of the definition. Valid values are ruby, javascript
    # @option opts [String] :include Related objects that can be included in the response:  custom_signature, results See Including Objects for more information.
    # @return [CustomSignatureDefinition]
    def update(id, opts = {})
      data, _status_code, _headers = update_with_http_info(id, opts)
      return data
    end

    # Update a(n) Custom Signature Definition
    # 
    # @param id Custom Signature Definition ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code The code for this definition
    # @option opts [String] :language The language of the definition. Valid values are ruby, javascript
    # @option opts [String] :include Related objects that can be included in the response:  custom_signature, results See Including Objects for more information.
    # @return [Array<(CustomSignatureDefinition, Fixnum, Hash)>] CustomSignatureDefinition data, response status code and response headers
    def update_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignatureDefinitionsApi.update ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomSignatureDefinitionsApi.update" if id.nil?
      if opts[:'language'] && !['ruby', 'javascript'].include?(opts[:'language'])
        fail ArgumentError, 'invalid value for "language", must be one of ruby, javascript'
      end
      # resource path
      local_var_path = "/api/v2/custom_signature_definitions/{id}.json_api".sub('{format}','json_api').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["code"] = opts[:'code'] if !opts[:'code'].nil?
      form_params["language"] = opts[:'language'] if !opts[:'language'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomSignatureDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignatureDefinitionsApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
