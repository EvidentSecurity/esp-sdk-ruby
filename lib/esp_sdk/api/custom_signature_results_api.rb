=begin
#ESP Documentation

#The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

OpenAPI spec version: v2_sdk

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ESP
  class CustomSignatureResultsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a(n) Custom Signature Result
    # 
    # @param code The code for this definition
    # @param custom_signature_definition_id ID of the custom signature definition this result belongs to
    # @param external_account_id ID of the external account the code should run for
    # @param language The language of the definition. Valid values are ruby, javascript
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :region_id ID of the region the code should run for.  Required if region is not supplied.
    # @option opts [String] :region Code of the region the result code should run for. Ex: us-east-1. This can be sent instead of region_id
    # @option opts [String] :include Related objects that can be included in the response:  external_account, region, definition See Including Objects for more information.
    # @return [CustomSignatureResult]
    def create(code, custom_signature_definition_id, external_account_id, language, opts = {})
      data, _status_code, _headers = create_with_http_info(code, custom_signature_definition_id, external_account_id, language, opts)
      return data
    end

    # Create a(n) Custom Signature Result
    # 
    # @param code The code for this definition
    # @param custom_signature_definition_id ID of the custom signature definition this result belongs to
    # @param external_account_id ID of the external account the code should run for
    # @param language The language of the definition. Valid values are ruby, javascript
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :region_id ID of the region the code should run for.  Required if region is not supplied.
    # @option opts [String] :region Code of the region the result code should run for. Ex: us-east-1. This can be sent instead of region_id
    # @option opts [String] :include Related objects that can be included in the response:  external_account, region, definition See Including Objects for more information.
    # @return [Array<(CustomSignatureResult, Fixnum, Hash)>] CustomSignatureResult data, response status code and response headers
    def create_with_http_info(code, custom_signature_definition_id, external_account_id, language, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignatureResultsApi.create ..."
      end
      # verify the required parameter 'code' is set
      fail ArgumentError, "Missing the required parameter 'code' when calling CustomSignatureResultsApi.create" if code.nil?
      # verify the required parameter 'custom_signature_definition_id' is set
      fail ArgumentError, "Missing the required parameter 'custom_signature_definition_id' when calling CustomSignatureResultsApi.create" if custom_signature_definition_id.nil?
      # verify the required parameter 'external_account_id' is set
      fail ArgumentError, "Missing the required parameter 'external_account_id' when calling CustomSignatureResultsApi.create" if external_account_id.nil?
      # verify the required parameter 'language' is set
      fail ArgumentError, "Missing the required parameter 'language' when calling CustomSignatureResultsApi.create" if language.nil?
      # verify enum value
      unless ['ruby', 'javascript'].include?(language)
        fail ArgumentError, "invalid value for 'language', must be one of ruby, javascript"
      end
      # resource path
      local_var_path = "/api/v2/custom_signature_results.json_api".sub('{format}','json_api')

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["code"] = code
      form_params["custom_signature_definition_id"] = custom_signature_definition_id
      form_params["external_account_id"] = external_account_id
      form_params["language"] = language
      form_params["region_id"] = opts[:'region_id'] if !opts[:'region_id'].nil?
      form_params["region"] = opts[:'region'] if !opts[:'region'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomSignatureResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignatureResultsApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Custom Signature Results
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :filter Filter Params for Searching.  Equality Searchable Attributes: [id, language, status]   Sortable Attribute: [id] Searchable Associations: [definition, region, external_account] See Searching Lists for more information. See the filter parameter of the association&#39;s list action to see what attributes are searchable on each association. See Conditions on Relationships in Searching Lists for more information.
    # @option opts [String] :page Page Number and Page Size.  number is the page number of the collection to return, size is the number of items to return per page (default to {:number=>1,+:size=>20})
    # @option opts [String] :include Related objects that can be included in the response:  external_account, region, definition See Including Objects for more information.
    # @return [PaginatedCollection]
    def list(opts = {})
      data, _status_code, _headers = list_with_http_info(opts)
      return data
    end

    # Get a list of Custom Signature Results
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :filter Filter Params for Searching.  Equality Searchable Attributes: [id, language, status]   Sortable Attribute: [id] Searchable Associations: [definition, region, external_account] See Searching Lists for more information. See the filter parameter of the association&#39;s list action to see what attributes are searchable on each association. See Conditions on Relationships in Searching Lists for more information.
    # @option opts [String] :page Page Number and Page Size.  number is the page number of the collection to return, size is the number of items to return per page
    # @option opts [String] :include Related objects that can be included in the response:  external_account, region, definition See Including Objects for more information.
    # @return [Array<(PaginatedCollection, Fixnum, Hash)>] PaginatedCollection data, response status code and response headers
    def list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignatureResultsApi.list ..."
      end
      # resource path
      local_var_path = "/api/v2/custom_signature_results.json_api".sub('{format}','json_api')

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["filter"] = opts[:'filter'] if !opts[:'filter'].nil?
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignatureResultsApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the Alerts for a given Custom Signature Result
    # This format is slightly different than the standard alert format. A successful call to this API returns a list of alerts for the custom signature result identified by the custom_signature_result_id parameter.
    # @param custom_signature_result_id Custom Signature Result ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page Page Number and Page Size.  number is the page number of the collection to return, size is the number of items to return per page (default to {:number=>1,+:size=>20})
    # @option opts [String] :include Related objects that can be included in the response:  external_account, region, custom_signature See Including Objects for more information.
    # @return [PaginatedCollection]
    def list_alerts(custom_signature_result_id, opts = {})
      data, _status_code, _headers = list_alerts_with_http_info(custom_signature_result_id, opts)
      return data
    end

    # Returns the Alerts for a given Custom Signature Result
    # This format is slightly different than the standard alert format. A successful call to this API returns a list of alerts for the custom signature result identified by the custom_signature_result_id parameter.
    # @param custom_signature_result_id Custom Signature Result ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page Page Number and Page Size.  number is the page number of the collection to return, size is the number of items to return per page
    # @option opts [String] :include Related objects that can be included in the response:  external_account, region, custom_signature See Including Objects for more information.
    # @return [Array<(PaginatedCollection, Fixnum, Hash)>] PaginatedCollection data, response status code and response headers
    def list_alerts_with_http_info(custom_signature_result_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignatureResultsApi.list_alerts ..."
      end
      # verify the required parameter 'custom_signature_result_id' is set
      fail ArgumentError, "Missing the required parameter 'custom_signature_result_id' when calling CustomSignatureResultsApi.list_alerts" if custom_signature_result_id.nil?
      # resource path
      local_var_path = "/api/v2/custom_signature_results/{custom_signature_result_id}/alerts.json_api".sub('{format}','json_api').sub('{' + 'custom_signature_result_id' + '}', custom_signature_result_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignatureResultsApi#list_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show a single Custom Signature Result
    # 
    # @param id Custom Signature Result ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  external_account, region, definition See Including Objects for more information.
    # @return [CustomSignatureResult]
    def show(id, opts = {})
      data, _status_code, _headers = show_with_http_info(id, opts)
      return data
    end

    # Show a single Custom Signature Result
    # 
    # @param id Custom Signature Result ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  external_account, region, definition See Including Objects for more information.
    # @return [Array<(CustomSignatureResult, Fixnum, Hash)>] CustomSignatureResult data, response status code and response headers
    def show_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignatureResultsApi.show ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomSignatureResultsApi.show" if id.nil?
      # resource path
      local_var_path = "/api/v2/custom_signature_results/{id}.json_api".sub('{format}','json_api').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomSignatureResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignatureResultsApi#show\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
