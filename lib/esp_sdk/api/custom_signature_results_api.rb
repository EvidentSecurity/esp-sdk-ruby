=begin
#ESP Documentation

#No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ESP
  class CustomSignatureResultsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a(n) Result
    # 
    # @param code The code to run
    # @param custom_signature_definition_id ID of the custom signature definition this result should belong to.
    # @param external_account_id ID of the external account the code should run for.
    # @param language The language of the code
    # @param region_id ID of the region the code should run for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :region Code of the region the result code should run for. Ex: us-east-1. This can be sent instead of region_id
    # @return [Result]
    def create(code, custom_signature_definition_id, external_account_id, language, region_id, opts = {})
      data, _status_code, _headers = create_with_http_info(code, custom_signature_definition_id, external_account_id, language, region_id, opts)
      return data
    end

    # Create a(n) Result
    # 
    # @param code The code to run
    # @param custom_signature_definition_id ID of the custom signature definition this result should belong to.
    # @param external_account_id ID of the external account the code should run for.
    # @param language The language of the code
    # @param region_id ID of the region the code should run for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :region Code of the region the result code should run for. Ex: us-east-1. This can be sent instead of region_id
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def create_with_http_info(code, custom_signature_definition_id, external_account_id, language, region_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignatureResultsApi.create ..."
      end
      # verify the required parameter 'code' is set
      fail ArgumentError, "Missing the required parameter 'code' when calling CustomSignatureResultsApi.create" if code.nil?
      # verify the required parameter 'custom_signature_definition_id' is set
      fail ArgumentError, "Missing the required parameter 'custom_signature_definition_id' when calling CustomSignatureResultsApi.create" if custom_signature_definition_id.nil?
      # verify the required parameter 'external_account_id' is set
      fail ArgumentError, "Missing the required parameter 'external_account_id' when calling CustomSignatureResultsApi.create" if external_account_id.nil?
      # verify the required parameter 'language' is set
      fail ArgumentError, "Missing the required parameter 'language' when calling CustomSignatureResultsApi.create" if language.nil?
      # verify the required parameter 'region_id' is set
      fail ArgumentError, "Missing the required parameter 'region_id' when calling CustomSignatureResultsApi.create" if region_id.nil?
      # resource path
      local_var_path = "/api/v2/custom_signature_results.json_api".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["code"] = code
      form_params["custom_signature_definition_id"] = custom_signature_definition_id
      form_params["external_account_id"] = external_account_id
      form_params["language"] = language
      form_params["region_id"] = region_id
      form_params["region"] = opts[:'region'] if !opts[:'region'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignatureResultsApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Results
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :page Page Number
    # @option opts [Hash<String, String>] :filter Filter Params for Searching
    # @option opts [String] :include Included Objects
    # @return [PaginatedCollection]
    def list(opts = {})
      data, _status_code, _headers = list_with_http_info(opts)
      return data
    end

    # Get a list of Results
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :page Page Number
    # @option opts [Hash<String, String>] :filter Filter Params for Searching
    # @option opts [String] :include Included Objects
    # @return [Array<(PaginatedCollection, Fixnum, Hash)>] PaginatedCollection data, response status code and response headers
    def list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignatureResultsApi.list ..."
      end
      # resource path
      local_var_path = "/api/v2/custom_signature_results.json_api".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?
      form_params["filter"] = opts[:'filter'] if !opts[:'filter'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignatureResultsApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show a single Result
    # 
    # @param id Result Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Included Objects
    # @return [Result]
    def show(id, opts = {})
      data, _status_code, _headers = show_with_http_info(id, opts)
      return data
    end

    # Show a single Result
    # 
    # @param id Result Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Included Objects
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def show_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignatureResultsApi.show ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomSignatureResultsApi.show" if id.nil?
      # resource path
      local_var_path = "/api/v2/custom_signature_results/{id}.json_api".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignatureResultsApi#show\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
