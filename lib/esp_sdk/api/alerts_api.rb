=begin
#ESP Documentation

#No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ESP
  class AlertsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get a list of Alerts
    # 
    # @param report_id Id of the Report to Return Alerts For
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :page Page Number
    # @option opts [Hash<String, String>] :filter Filter Params for Searching
    # @option opts [String] :include Included Objects
    # @option opts [Integer] :region_id Return only alerts for this region.
    # @option opts [String] :status Return only alerts for the give status(es). Valid values are fail, warn, error, pass, info
    # @option opts [Integer] :first_seen Return only alerts that have started within a number of hours of the report. For example, first_seen of 3 will return alerts that started showing up within the last 3 hours of the report.
    # @option opts [BOOLEAN] :suppressed Return only suppressed alerts
    # @option opts [Integer] :team_id Return only alerts for the given team.
    # @option opts [Integer] :external_account_id Return only alerts for the given external id.
    # @option opts [Integer] :service_id Return only alerts on signatures with the given service.
    # @option opts [String] :signature_severity Return only alerts for signatures with the given risk_level. Valid values are Low, Medium, High
    # @option opts [String] :signature_name Return only alerts for signatures with the given name.
    # @option opts [String] :resource Return only alerts for the given resource or tag.
    # @option opts [String] :signature_identifier Return only alerts for signatures with the given identifier.
    # @return [PaginatedCollection]
    def list(report_id, opts = {})
      data, _status_code, _headers = list_with_http_info(report_id, opts)
      return data
    end

    # Get a list of Alerts
    # 
    # @param report_id Id of the Report to Return Alerts For
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :page Page Number
    # @option opts [Hash<String, String>] :filter Filter Params for Searching
    # @option opts [String] :include Included Objects
    # @option opts [Integer] :region_id Return only alerts for this region.
    # @option opts [String] :status Return only alerts for the give status(es). Valid values are fail, warn, error, pass, info
    # @option opts [Integer] :first_seen Return only alerts that have started within a number of hours of the report. For example, first_seen of 3 will return alerts that started showing up within the last 3 hours of the report.
    # @option opts [BOOLEAN] :suppressed Return only suppressed alerts
    # @option opts [Integer] :team_id Return only alerts for the given team.
    # @option opts [Integer] :external_account_id Return only alerts for the given external id.
    # @option opts [Integer] :service_id Return only alerts on signatures with the given service.
    # @option opts [String] :signature_severity Return only alerts for signatures with the given risk_level. Valid values are Low, Medium, High
    # @option opts [String] :signature_name Return only alerts for signatures with the given name.
    # @option opts [String] :resource Return only alerts for the given resource or tag.
    # @option opts [String] :signature_identifier Return only alerts for signatures with the given identifier.
    # @return [Array<(PaginatedCollection, Fixnum, Hash)>] PaginatedCollection data, response status code and response headers
    def list_with_http_info(report_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AlertsApi.list ..."
      end
      # verify the required parameter 'report_id' is set
      fail ArgumentError, "Missing the required parameter 'report_id' when calling AlertsApi.list" if report_id.nil?
      # resource path
      local_var_path = "/api/v2/reports/{report_id}/alerts.json_api".sub('{format}','json').sub('{' + 'report_id' + '}', report_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?
      form_params["filter"] = opts[:'filter'] if !opts[:'filter'].nil?
      form_params["region_id"] = opts[:'region_id'] if !opts[:'region_id'].nil?
      form_params["status"] = opts[:'status'] if !opts[:'status'].nil?
      form_params["first_seen"] = opts[:'first_seen'] if !opts[:'first_seen'].nil?
      form_params["suppressed"] = opts[:'suppressed'] if !opts[:'suppressed'].nil?
      form_params["team_id"] = opts[:'team_id'] if !opts[:'team_id'].nil?
      form_params["external_account_id"] = opts[:'external_account_id'] if !opts[:'external_account_id'].nil?
      form_params["service_id"] = opts[:'service_id'] if !opts[:'service_id'].nil?
      form_params["signature_severity"] = opts[:'signature_severity'] if !opts[:'signature_severity'].nil?
      form_params["signature_name"] = opts[:'signature_name'] if !opts[:'signature_name'].nil?
      form_params["resource"] = opts[:'resource'] if !opts[:'resource'].nil?
      form_params["signature_identifier"] = opts[:'signature_identifier'] if !opts[:'signature_identifier'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show a single Alert
    # 
    # @param id Alert Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Included Objects
    # @return [Alert]
    def show(id, opts = {})
      data, _status_code, _headers = show_with_http_info(id, opts)
      return data
    end

    # Show a single Alert
    # 
    # @param id Alert Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Included Objects
    # @return [Array<(Alert, Fixnum, Hash)>] Alert data, response status code and response headers
    def show_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AlertsApi.show ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling AlertsApi.show" if id.nil?
      # resource path
      local_var_path = "/api/v2/alerts/{id}.json_api".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Alert')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#show\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
