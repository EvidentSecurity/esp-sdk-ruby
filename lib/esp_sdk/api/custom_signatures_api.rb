=begin
#ESP Documentation

#The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

OpenAPI spec version: v2_sdk

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ESP
  class CustomSignaturesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a(n) Custom Signature
    # 
    # @param external_account_ids The external account IDs this custom signature should run for. If no accounts are selected the custom signature will not be run.
    # @param identifier The identifier to use for the custom signature. Common format is AWS:- such as AWS:IAM-001
    # @param name The name of the custom signature
    # @param risk_level The risk-level of the problem identified by the custom signature. Valid values are low, medium, high
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  organization, teams, external_accounts, definitions, suppressions See Including Objects for more information.
    # @option opts [String] :description The description of the custom signature that is displayed on alerts
    # @option opts [String] :resolution Details for how to resolve this custom signature that is displayed on alerts
    # @return [CustomSignature]
    def create(external_account_ids, identifier, name, risk_level, opts = {})
      data, _status_code, _headers = create_with_http_info(external_account_ids, identifier, name, risk_level, opts)
      return data
    end

    # Create a(n) Custom Signature
    # 
    # @param external_account_ids The external account IDs this custom signature should run for. If no accounts are selected the custom signature will not be run.
    # @param identifier The identifier to use for the custom signature. Common format is AWS:- such as AWS:IAM-001
    # @param name The name of the custom signature
    # @param risk_level The risk-level of the problem identified by the custom signature. Valid values are low, medium, high
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  organization, teams, external_accounts, definitions, suppressions See Including Objects for more information.
    # @option opts [String] :description The description of the custom signature that is displayed on alerts
    # @option opts [String] :resolution Details for how to resolve this custom signature that is displayed on alerts
    # @return [Array<(CustomSignature, Fixnum, Hash)>] CustomSignature data, response status code and response headers
    def create_with_http_info(external_account_ids, identifier, name, risk_level, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignaturesApi.create ..."
      end
      # verify the required parameter 'external_account_ids' is set
      fail ArgumentError, "Missing the required parameter 'external_account_ids' when calling CustomSignaturesApi.create" if external_account_ids.nil?
      # verify the required parameter 'identifier' is set
      fail ArgumentError, "Missing the required parameter 'identifier' when calling CustomSignaturesApi.create" if identifier.nil?
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling CustomSignaturesApi.create" if name.nil?
      # verify the required parameter 'risk_level' is set
      fail ArgumentError, "Missing the required parameter 'risk_level' when calling CustomSignaturesApi.create" if risk_level.nil?
      # verify enum value
      unless ['low', 'medium', 'high'].include?(risk_level)
        fail ArgumentError, "invalid value for 'risk_level', must be one of low, medium, high"
      end
      # resource path
      local_var_path = "/api/v2/custom_signatures.json_api".sub('{format}','json_api')

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["external_account_ids"] = @api_client.build_collection_param(external_account_ids, :multi)
      form_params["identifier"] = identifier
      form_params["name"] = name
      form_params["risk_level"] = risk_level
      form_params["description"] = opts[:'description'] if !opts[:'description'].nil?
      form_params["resolution"] = opts[:'resolution'] if !opts[:'resolution'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignaturesApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a(n) Custom Signature
    # 
    # @param id Custom Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Meta]
    def delete(id, opts = {})
      data, _status_code, _headers = delete_with_http_info(id, opts)
      return data
    end

    # Delete a(n) Custom Signature
    # 
    # @param id Custom Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Meta, Fixnum, Hash)>] Meta data, response status code and response headers
    def delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignaturesApi.delete ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomSignaturesApi.delete" if id.nil?
      # resource path
      local_var_path = "/api/v2/custom_signatures/{id}.json_api".sub('{format}','json_api').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Meta')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignaturesApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Custom Signatures
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  organization, teams, external_accounts, definitions, suppressions See Including Objects for more information.
    # @option opts [Hash<String, String>] :filter Filter Params for Searching.  Equality Searchable Attributes: [id, risk_level, service_id, name, identifier] Matching Searchable Attributes: [name, identifier]  Sortable Attributes: [name, updated_at, created_at, id] Searchable Associations: [organization, teams, definitions, integrations, suppressions] See Searching Lists for more information. See the filter parameter of the association&#39;s list action to see what attributes are searchable on each association. See Conditions on Relationships in Searching Lists for more information.
    # @option opts [String] :page Page Number and Page Size.  Number is the page number of the collection to return, size is the number of items to return per page. (default to {:number=>1,+:size=>20})
    # @return [PaginatedCollection]
    def list(opts = {})
      data, _status_code, _headers = list_with_http_info(opts)
      return data
    end

    # Get a list of Custom Signatures
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  organization, teams, external_accounts, definitions, suppressions See Including Objects for more information.
    # @option opts [Hash<String, String>] :filter Filter Params for Searching.  Equality Searchable Attributes: [id, risk_level, service_id, name, identifier] Matching Searchable Attributes: [name, identifier]  Sortable Attributes: [name, updated_at, created_at, id] Searchable Associations: [organization, teams, definitions, integrations, suppressions] See Searching Lists for more information. See the filter parameter of the association&#39;s list action to see what attributes are searchable on each association. See Conditions on Relationships in Searching Lists for more information.
    # @option opts [String] :page Page Number and Page Size.  Number is the page number of the collection to return, size is the number of items to return per page.
    # @return [Array<(PaginatedCollection, Fixnum, Hash)>] PaginatedCollection data, response status code and response headers
    def list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignaturesApi.list ..."
      end
      # resource path
      local_var_path = "/api/v2/custom_signatures.json_api".sub('{format}','json_api')

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["filter"] = opts[:'filter'] if !opts[:'filter'].nil?
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignaturesApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show a single Custom Signature
    # 
    # @param id Custom Signature ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  organization, teams, external_accounts, definitions, suppressions See Including Objects for more information.
    # @return [CustomSignature]
    def show(id, opts = {})
      data, _status_code, _headers = show_with_http_info(id, opts)
      return data
    end

    # Show a single Custom Signature
    # 
    # @param id Custom Signature ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  organization, teams, external_accounts, definitions, suppressions See Including Objects for more information.
    # @return [Array<(CustomSignature, Fixnum, Hash)>] CustomSignature data, response status code and response headers
    def show_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignaturesApi.show ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomSignaturesApi.show" if id.nil?
      # resource path
      local_var_path = "/api/v2/custom_signatures/{id}.json_api".sub('{format}','json_api').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignaturesApi#show\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a(n) Custom Signature
    # 
    # @param id Custom Signature ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  organization, teams, external_accounts, definitions, suppressions See Including Objects for more information.
    # @option opts [String] :description The description of the custom signature that is displayed on alerts
    # @option opts [Array<Integer>] :external_account_ids The external account IDs this custom signature should run for. If no accounts are selected the custom signature will not be run.
    # @option opts [String] :identifier The identifier to use for the custom signature. Common format is AWS:- such as AWS:IAM-001
    # @option opts [String] :name The name of the custom signature
    # @option opts [String] :resolution Details for how to resolve this custom signature that is displayed on alerts
    # @option opts [String] :risk_level The risk-level of the problem identified by the custom signature. Valid values are low, medium, high
    # @return [CustomSignature]
    def update(id, opts = {})
      data, _status_code, _headers = update_with_http_info(id, opts)
      return data
    end

    # Update a(n) Custom Signature
    # 
    # @param id Custom Signature ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  organization, teams, external_accounts, definitions, suppressions See Including Objects for more information.
    # @option opts [String] :description The description of the custom signature that is displayed on alerts
    # @option opts [Array<Integer>] :external_account_ids The external account IDs this custom signature should run for. If no accounts are selected the custom signature will not be run.
    # @option opts [String] :identifier The identifier to use for the custom signature. Common format is AWS:- such as AWS:IAM-001
    # @option opts [String] :name The name of the custom signature
    # @option opts [String] :resolution Details for how to resolve this custom signature that is displayed on alerts
    # @option opts [String] :risk_level The risk-level of the problem identified by the custom signature. Valid values are low, medium, high
    # @return [Array<(CustomSignature, Fixnum, Hash)>] CustomSignature data, response status code and response headers
    def update_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomSignaturesApi.update ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomSignaturesApi.update" if id.nil?
      if opts[:'risk_level'] && !['low', 'medium', 'high'].include?(opts[:'risk_level'])
        fail ArgumentError, 'invalid value for "risk_level", must be one of low, medium, high'
      end
      # resource path
      local_var_path = "/api/v2/custom_signatures/{id}.json_api".sub('{format}','json_api').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["description"] = opts[:'description'] if !opts[:'description'].nil?
      form_params["external_account_ids"] = @api_client.build_collection_param(opts[:'external_account_ids'], :multi) if !opts[:'external_account_ids'].nil?
      form_params["identifier"] = opts[:'identifier'] if !opts[:'identifier'].nil?
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?
      form_params["resolution"] = opts[:'resolution'] if !opts[:'resolution'].nil?
      form_params["risk_level"] = opts[:'risk_level'] if !opts[:'risk_level'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomSignaturesApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
