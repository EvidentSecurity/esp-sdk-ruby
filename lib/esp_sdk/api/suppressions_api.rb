=begin
#ESP Documentation

#The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

OpenAPI spec version: v2_sdk

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ESP
  class SuppressionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # A successful call to this API will deactivate a suppression identified by the id parameter.
    # 
    # @param id Suppression Id
    # @param [Hash] opts the optional parameters
    # @return [Suppression]
    def deactivate(id, opts = {})
      data, _status_code, _headers = deactivate_with_http_info(id, opts)
      return data
    end

    # A successful call to this API will deactivate a suppression identified by the id parameter.
    # 
    # @param id Suppression Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Suppression, Fixnum, Hash)>] Suppression data, response status code and response headers
    def deactivate_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SuppressionsApi.deactivate ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling SuppressionsApi.deactivate" if id.nil?
      # resource path
      local_var_path = "/api/v2/suppressions/{id}/deactivate.json_api".sub('{format}','json_api').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Suppression')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SuppressionsApi#deactivate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Suppressions
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :filter Filter Params for Searching.  Equality Searchable Attributes: [id, aasm_state, status, suppression_type, type_type, resource, reason] Matching Searchable Attributes: [suppression_type, type_type, resource, reason]  Sortable Attributes: [suppression_type, type_type, updated_at, created_at, id, aasm_state, status] Searchable Associations: [regions, created_by, user, type, signatures] See the filter parameter of the association&#39;s list action to see what attributes are searchable on each association. See Searching on Relationships for more information. See Searching Lists for more information. Example: filter: {name_eq: &#39;Bob&#39;}
    # @option opts [String] :include Objects that can be included in the response:  organization,created_by,regions,external_accounts,signatures,custom_signatures  See Including Objects for more information.
    # @option opts [Hash<String, String>] :page Page Number and Page Size.  Example: page: {number: 1, size: 20}
    # @return [PaginatedCollection]
    def list(opts = {})
      data, _status_code, _headers = list_with_http_info(opts)
      return data
    end

    # Get a list of Suppressions
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :filter Filter Params for Searching.  Equality Searchable Attributes: [id, aasm_state, status, suppression_type, type_type, resource, reason] Matching Searchable Attributes: [suppression_type, type_type, resource, reason]  Sortable Attributes: [suppression_type, type_type, updated_at, created_at, id, aasm_state, status] Searchable Associations: [regions, created_by, user, type, signatures] See the filter parameter of the association&#39;s list action to see what attributes are searchable on each association. See Searching on Relationships for more information. See Searching Lists for more information. Example: filter: {name_eq: &#39;Bob&#39;}
    # @option opts [String] :include Objects that can be included in the response:  organization,created_by,regions,external_accounts,signatures,custom_signatures  See Including Objects for more information.
    # @option opts [Hash<String, String>] :page Page Number and Page Size.  Example: page: {number: 1, size: 20}
    # @return [Array<(PaginatedCollection, Fixnum, Hash)>] PaginatedCollection data, response status code and response headers
    def list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SuppressionsApi.list ..."
      end
      # resource path
      local_var_path = "/api/v2/suppressions.json_api".sub('{format}','json_api')

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["filter"] = opts[:'filter'] if !opts[:'filter'].nil?
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SuppressionsApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show a single Suppression
    # 
    # @param id Suppression Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Objects that can be included in the response:  organization,created_by,regions,external_accounts,signatures,custom_signatures  See Including Objects for more information.
    # @return [Suppression]
    def show(id, opts = {})
      data, _status_code, _headers = show_with_http_info(id, opts)
      return data
    end

    # Show a single Suppression
    # 
    # @param id Suppression Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Objects that can be included in the response:  organization,created_by,regions,external_accounts,signatures,custom_signatures  See Including Objects for more information.
    # @return [Array<(Suppression, Fixnum, Hash)>] Suppression data, response status code and response headers
    def show_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SuppressionsApi.show ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling SuppressionsApi.show" if id.nil?
      # resource path
      local_var_path = "/api/v2/suppressions/{id}.json_api".sub('{format}','json_api').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Suppression')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SuppressionsApi#show\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # A successful call to this API creates a new region suppression for the supplied regions . The body of the request must contain a json api compliant hash of attributes with type suppression/regions.
    # 
    # @param regions An array of region names to suppress
    # @param external_account_ids An Array of the external accounts identified by external_account_id to suppress the signature or custom signature on
    # @param reason The reason for creating the suppression
    # @param resource The resource string this suppression will suppress alerts for
    # @param [Hash] opts the optional parameters
    # @return [Suppression]
    def suppress_region(regions, external_account_ids, reason, resource, opts = {})
      data, _status_code, _headers = suppress_region_with_http_info(regions, external_account_ids, reason, resource, opts)
      return data
    end

    # A successful call to this API creates a new region suppression for the supplied regions . The body of the request must contain a json api compliant hash of attributes with type suppression/regions.
    # 
    # @param regions An array of region names to suppress
    # @param external_account_ids An Array of the external accounts identified by external_account_id to suppress the signature or custom signature on
    # @param reason The reason for creating the suppression
    # @param resource The resource string this suppression will suppress alerts for
    # @param [Hash] opts the optional parameters
    # @return [Array<(Suppression, Fixnum, Hash)>] Suppression data, response status code and response headers
    def suppress_region_with_http_info(regions, external_account_ids, reason, resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SuppressionsApi.suppress_region ..."
      end
      # verify the required parameter 'regions' is set
      fail ArgumentError, "Missing the required parameter 'regions' when calling SuppressionsApi.suppress_region" if regions.nil?
      # verify the required parameter 'external_account_ids' is set
      fail ArgumentError, "Missing the required parameter 'external_account_ids' when calling SuppressionsApi.suppress_region" if external_account_ids.nil?
      # verify the required parameter 'reason' is set
      fail ArgumentError, "Missing the required parameter 'reason' when calling SuppressionsApi.suppress_region" if reason.nil?
      # verify the required parameter 'resource' is set
      fail ArgumentError, "Missing the required parameter 'resource' when calling SuppressionsApi.suppress_region" if resource.nil?
      # resource path
      local_var_path = "/api/v2/suppressions/regions.json_api".sub('{format}','json_api')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["regions"] = @api_client.build_collection_param(regions, :csv)
      form_params["external_account_ids"] = @api_client.build_collection_param(external_account_ids, :csv)
      form_params["reason"] = reason
      form_params["resource"] = resource

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Suppression')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SuppressionsApi#suppress_region\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # A successful call to this API creates a new signature suppression based on the supplied alert_id. The body of the request must contain a json api compliant hash of attributes with type suppression/regions.
    # 
    # @param alert_id The id for the alert you want to create a suppression for
    # @param reason The reason for creating the suppression
    # @param [Hash] opts the optional parameters
    # @return [Suppression]
    def suppress_region_from_alert(alert_id, reason, opts = {})
      data, _status_code, _headers = suppress_region_from_alert_with_http_info(alert_id, reason, opts)
      return data
    end

    # A successful call to this API creates a new signature suppression based on the supplied alert_id. The body of the request must contain a json api compliant hash of attributes with type suppression/regions.
    # 
    # @param alert_id The id for the alert you want to create a suppression for
    # @param reason The reason for creating the suppression
    # @param [Hash] opts the optional parameters
    # @return [Array<(Suppression, Fixnum, Hash)>] Suppression data, response status code and response headers
    def suppress_region_from_alert_with_http_info(alert_id, reason, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SuppressionsApi.suppress_region_from_alert ..."
      end
      # verify the required parameter 'alert_id' is set
      fail ArgumentError, "Missing the required parameter 'alert_id' when calling SuppressionsApi.suppress_region_from_alert" if alert_id.nil?
      # verify the required parameter 'reason' is set
      fail ArgumentError, "Missing the required parameter 'reason' when calling SuppressionsApi.suppress_region_from_alert" if reason.nil?
      # resource path
      local_var_path = "/api/v2/suppressions/alert/{alert_id}/regions.json_api".sub('{format}','json_api')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["alert_id"] = alert_id
      form_params["reason"] = reason

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Suppression')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SuppressionsApi#suppress_region_from_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # A successful call to this API creates a new signature suppression for the supplied signature_ids or custom_signature_ids. The body of the request must contain a json API compliant hash of attributes with type suppression/signatures.
    # 
    # @param regions An array of region names to suppress
    # @param external_account_ids An Array of the external accounts identified by external_account_id to suppress the signature or custom signature on
    # @param reason The reason for creating the suppression
    # @param resource The resource string this suppression will suppress alerts for
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :signature_ids An array of signatures identified by signature_id to suppress. Required if custom_signature_ids is blank
    # @option opts [Array<Integer>] :custom_signature_ids An array of custom signatures identified by custom_signature_id to suppress. Required if signature_ids is blank
    # @return [Suppression]
    def suppress_signature(regions, external_account_ids, reason, resource, opts = {})
      data, _status_code, _headers = suppress_signature_with_http_info(regions, external_account_ids, reason, resource, opts)
      return data
    end

    # A successful call to this API creates a new signature suppression for the supplied signature_ids or custom_signature_ids. The body of the request must contain a json API compliant hash of attributes with type suppression/signatures.
    # 
    # @param regions An array of region names to suppress
    # @param external_account_ids An Array of the external accounts identified by external_account_id to suppress the signature or custom signature on
    # @param reason The reason for creating the suppression
    # @param resource The resource string this suppression will suppress alerts for
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :signature_ids An array of signatures identified by signature_id to suppress. Required if custom_signature_ids is blank
    # @option opts [Array<Integer>] :custom_signature_ids An array of custom signatures identified by custom_signature_id to suppress. Required if signature_ids is blank
    # @return [Array<(Suppression, Fixnum, Hash)>] Suppression data, response status code and response headers
    def suppress_signature_with_http_info(regions, external_account_ids, reason, resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SuppressionsApi.suppress_signature ..."
      end
      # verify the required parameter 'regions' is set
      fail ArgumentError, "Missing the required parameter 'regions' when calling SuppressionsApi.suppress_signature" if regions.nil?
      # verify the required parameter 'external_account_ids' is set
      fail ArgumentError, "Missing the required parameter 'external_account_ids' when calling SuppressionsApi.suppress_signature" if external_account_ids.nil?
      # verify the required parameter 'reason' is set
      fail ArgumentError, "Missing the required parameter 'reason' when calling SuppressionsApi.suppress_signature" if reason.nil?
      # verify the required parameter 'resource' is set
      fail ArgumentError, "Missing the required parameter 'resource' when calling SuppressionsApi.suppress_signature" if resource.nil?
      # resource path
      local_var_path = "/api/v2/suppressions/signatures.json_api".sub('{format}','json_api')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["regions"] = @api_client.build_collection_param(regions, :csv)
      form_params["external_account_ids"] = @api_client.build_collection_param(external_account_ids, :csv)
      form_params["reason"] = reason
      form_params["resource"] = resource
      form_params["signature_ids"] = @api_client.build_collection_param(opts[:'signature_ids'], :csv) if !opts[:'signature_ids'].nil?
      form_params["custom_signature_ids"] = @api_client.build_collection_param(opts[:'custom_signature_ids'], :csv) if !opts[:'custom_signature_ids'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Suppression')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SuppressionsApi#suppress_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # A successful call to this API creates a new signature suppression based on the supplied alert_id. The body of the request must contain a json api compliant hash of attributes with type suppression/signatures.
    # 
    # @param alert_id The id for the alert you want to create a suppression for
    # @param reason The reason for creating the suppression
    # @param [Hash] opts the optional parameters
    # @return [Suppression]
    def suppress_signature_from_alert(alert_id, reason, opts = {})
      data, _status_code, _headers = suppress_signature_from_alert_with_http_info(alert_id, reason, opts)
      return data
    end

    # A successful call to this API creates a new signature suppression based on the supplied alert_id. The body of the request must contain a json api compliant hash of attributes with type suppression/signatures.
    # 
    # @param alert_id The id for the alert you want to create a suppression for
    # @param reason The reason for creating the suppression
    # @param [Hash] opts the optional parameters
    # @return [Array<(Suppression, Fixnum, Hash)>] Suppression data, response status code and response headers
    def suppress_signature_from_alert_with_http_info(alert_id, reason, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SuppressionsApi.suppress_signature_from_alert ..."
      end
      # verify the required parameter 'alert_id' is set
      fail ArgumentError, "Missing the required parameter 'alert_id' when calling SuppressionsApi.suppress_signature_from_alert" if alert_id.nil?
      # verify the required parameter 'reason' is set
      fail ArgumentError, "Missing the required parameter 'reason' when calling SuppressionsApi.suppress_signature_from_alert" if reason.nil?
      # resource path
      local_var_path = "/api/v2/suppressions/alert/{alert_id}/signatures.json_api".sub('{format}','json_api')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["alert_id"] = alert_id
      form_params["reason"] = reason

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Suppression')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SuppressionsApi#suppress_signature_from_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # A successful call to this API creates a new unique identifier suppression based on the supplied alert_id. The body of the request must contain a json api compliant hash of attributes with type suppression/signatures.
    # 
    # @param alert_id The id for the alert you want to create a suppression for
    # @param reason The reason for creating the suppression
    # @param [Hash] opts the optional parameters
    # @return [Suppression]
    def suppress_unique_identifier_from_alert(alert_id, reason, opts = {})
      data, _status_code, _headers = suppress_unique_identifier_from_alert_with_http_info(alert_id, reason, opts)
      return data
    end

    # A successful call to this API creates a new unique identifier suppression based on the supplied alert_id. The body of the request must contain a json api compliant hash of attributes with type suppression/signatures.
    # 
    # @param alert_id The id for the alert you want to create a suppression for
    # @param reason The reason for creating the suppression
    # @param [Hash] opts the optional parameters
    # @return [Array<(Suppression, Fixnum, Hash)>] Suppression data, response status code and response headers
    def suppress_unique_identifier_from_alert_with_http_info(alert_id, reason, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SuppressionsApi.suppress_unique_identifier_from_alert ..."
      end
      # verify the required parameter 'alert_id' is set
      fail ArgumentError, "Missing the required parameter 'alert_id' when calling SuppressionsApi.suppress_unique_identifier_from_alert" if alert_id.nil?
      # verify the required parameter 'reason' is set
      fail ArgumentError, "Missing the required parameter 'reason' when calling SuppressionsApi.suppress_unique_identifier_from_alert" if reason.nil?
      # resource path
      local_var_path = "/api/v2/suppressions/alert/{alert_id}/unique_identifiers.json_api".sub('{format}','json_api')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["alert_id"] = alert_id
      form_params["reason"] = reason

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Suppression')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SuppressionsApi#suppress_unique_identifier_from_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
