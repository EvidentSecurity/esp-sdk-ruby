=begin
#ESP Documentation

#The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

OpenAPI spec version: v2_sdk

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ESP
  class SubOrganizationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a(n) Sub Organization
    # 
    # @param organization_id The Id of the organization this sub organization should belong to
    # @param name The name of the sub organization
    # @param [Hash] opts the optional parameters
    # @return [SubOrganization]
    def create(organization_id, name, opts = {})
      data, _status_code, _headers = create_with_http_info(organization_id, name, opts)
      return data
    end

    # Create a(n) Sub Organization
    # 
    # @param organization_id The Id of the organization this sub organization should belong to
    # @param name The name of the sub organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubOrganization, Fixnum, Hash)>] SubOrganization data, response status code and response headers
    def create_with_http_info(organization_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubOrganizationsApi.create ..."
      end
      # verify the required parameter 'organization_id' is set
      fail ArgumentError, "Missing the required parameter 'organization_id' when calling SubOrganizationsApi.create" if organization_id.nil?
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling SubOrganizationsApi.create" if name.nil?
      # resource path
      local_var_path = "/api/v2/sub_organizations.json_api".sub('{format}','json_api')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["organization_id"] = organization_id
      form_params["name"] = name

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubOrganization')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubOrganizationsApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a(n) SubOrganization
    # 
    # @param id SubOrganization Id
    # @param [Hash] opts the optional parameters
    # @return [SubOrganization]
    def destroy(id, opts = {})
      data, _status_code, _headers = destroy_with_http_info(id, opts)
      return data
    end

    # Remove a(n) SubOrganization
    # 
    # @param id SubOrganization Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubOrganization, Fixnum, Hash)>] SubOrganization data, response status code and response headers
    def destroy_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubOrganizationsApi.destroy ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling SubOrganizationsApi.destroy" if id.nil?
      # resource path
      local_var_path = "/api/v2/sub_organizations/{id}.json_api".sub('{format}','json_api').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubOrganization')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubOrganizationsApi#destroy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Sub Organizations
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :filter Filter Params for Searching.  Equality Searchable Attributes: [id, name] Matching Searchable Attribute: [name]  Sortable Attributes: [name, updated_at, created_at, id] Searchable Association: [organization] See the filter parameter of the association&#39;s list action to see what attributes are searchable on each association. See Searching on Relationships for more information. See Searching Lists for more information. Example: filter: {name_eq: &#39;Bob&#39;}
    # @option opts [String] :include Objects that can be included in the response:  external_accounts,organization,teams  See Including Objects for more information.
    # @option opts [Hash<String, String>] :page Page Number and Page Size.  Example: page: {number: 1, size: 20}
    # @return [PaginatedCollection]
    def list(opts = {})
      data, _status_code, _headers = list_with_http_info(opts)
      return data
    end

    # Get a list of Sub Organizations
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :filter Filter Params for Searching.  Equality Searchable Attributes: [id, name] Matching Searchable Attribute: [name]  Sortable Attributes: [name, updated_at, created_at, id] Searchable Association: [organization] See the filter parameter of the association&#39;s list action to see what attributes are searchable on each association. See Searching on Relationships for more information. See Searching Lists for more information. Example: filter: {name_eq: &#39;Bob&#39;}
    # @option opts [String] :include Objects that can be included in the response:  external_accounts,organization,teams  See Including Objects for more information.
    # @option opts [Hash<String, String>] :page Page Number and Page Size.  Example: page: {number: 1, size: 20}
    # @return [Array<(PaginatedCollection, Fixnum, Hash)>] PaginatedCollection data, response status code and response headers
    def list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubOrganizationsApi.list ..."
      end
      # resource path
      local_var_path = "/api/v2/sub_organizations.json_api".sub('{format}','json_api')

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["filter"] = opts[:'filter'] if !opts[:'filter'].nil?
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubOrganizationsApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show a single Sub Organization
    # 
    # @param id Sub Organization Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Objects that can be included in the response:  external_accounts,organization,teams  See Including Objects for more information.
    # @return [SubOrganization]
    def show(id, opts = {})
      data, _status_code, _headers = show_with_http_info(id, opts)
      return data
    end

    # Show a single Sub Organization
    # 
    # @param id Sub Organization Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Objects that can be included in the response:  external_accounts,organization,teams  See Including Objects for more information.
    # @return [Array<(SubOrganization, Fixnum, Hash)>] SubOrganization data, response status code and response headers
    def show_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubOrganizationsApi.show ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling SubOrganizationsApi.show" if id.nil?
      # resource path
      local_var_path = "/api/v2/sub_organizations/{id}.json_api".sub('{format}','json_api').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubOrganization')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubOrganizationsApi#show\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a(n) Sub Organization
    # 
    # @param id Sub Organization Id
    # @param name The name of the sub organization
    # @param [Hash] opts the optional parameters
    # @return [SubOrganization]
    def update(id, name, opts = {})
      data, _status_code, _headers = update_with_http_info(id, name, opts)
      return data
    end

    # Update a(n) Sub Organization
    # 
    # @param id Sub Organization Id
    # @param name The name of the sub organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubOrganization, Fixnum, Hash)>] SubOrganization data, response status code and response headers
    def update_with_http_info(id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubOrganizationsApi.update ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling SubOrganizationsApi.update" if id.nil?
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling SubOrganizationsApi.update" if name.nil?
      # resource path
      local_var_path = "/api/v2/sub_organizations/{id}.json_api".sub('{format}','json_api').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["name"] = name

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubOrganization')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubOrganizationsApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
