=begin
#ESP Documentation

#The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

OpenAPI spec version: v2_sdk

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ESP
  class ExternalAccountUserAttributionChannelsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # A successful call to this API will create a User Attribution Channel for an external account.
    # 
    # @param external_account_id The ID of the external account to create a User Attribution Channel for
    # @param [Hash] opts the optional parameters
    # @return [Channel]
    def create(external_account_id, opts = {})
      data, _status_code, _headers = create_with_http_info(external_account_id, opts)
      return data
    end

    # A successful call to this API will create a User Attribution Channel for an external account.
    # 
    # @param external_account_id The ID of the external account to create a User Attribution Channel for
    # @param [Hash] opts the optional parameters
    # @return [Array<(Channel, Fixnum, Hash)>] Channel data, response status code and response headers
    def create_with_http_info(external_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExternalAccountUserAttributionChannelsApi.create ..."
      end
      # verify the required parameter 'external_account_id' is set
      fail ArgumentError, "Missing the required parameter 'external_account_id' when calling ExternalAccountUserAttributionChannelsApi.create" if external_account_id.nil?
      # resource path
      local_var_path = "/api/v2/external_accounts/{external_account_id}/user_attribution/channel.json_api".sub('{format}','json_api').sub('{' + 'external_account_id' + '}', external_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Channel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAccountUserAttributionChannelsApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # A successful call to this API will remove the User Attribution Channel for an external account.
    # 
    # @param external_account_id The ID of the external account to remove the User Attribution Channel from
    # @param [Hash] opts the optional parameters
    # @return [Channel]
    def destroy(external_account_id, opts = {})
      data, _status_code, _headers = destroy_with_http_info(external_account_id, opts)
      return data
    end

    # A successful call to this API will remove the User Attribution Channel for an external account.
    # 
    # @param external_account_id The ID of the external account to remove the User Attribution Channel from
    # @param [Hash] opts the optional parameters
    # @return [Array<(Channel, Fixnum, Hash)>] Channel data, response status code and response headers
    def destroy_with_http_info(external_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExternalAccountUserAttributionChannelsApi.destroy ..."
      end
      # verify the required parameter 'external_account_id' is set
      fail ArgumentError, "Missing the required parameter 'external_account_id' when calling ExternalAccountUserAttributionChannelsApi.destroy" if external_account_id.nil?
      # resource path
      local_var_path = "/api/v2/external_accounts/{external_account_id}/user_attribution/channel.json_api".sub('{format}','json_api').sub('{' + 'external_account_id' + '}', external_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Channel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAccountUserAttributionChannelsApi#destroy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # A successful call to this API will show the User Attribution Channel of an external account.
    # 
    # @param external_account_id The ID of the external account to show the user attribution channel for
    # @param [Hash] opts the optional parameters
    # @return [Channel]
    def show(external_account_id, opts = {})
      data, _status_code, _headers = show_with_http_info(external_account_id, opts)
      return data
    end

    # A successful call to this API will show the User Attribution Channel of an external account.
    # 
    # @param external_account_id The ID of the external account to show the user attribution channel for
    # @param [Hash] opts the optional parameters
    # @return [Array<(Channel, Fixnum, Hash)>] Channel data, response status code and response headers
    def show_with_http_info(external_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExternalAccountUserAttributionChannelsApi.show ..."
      end
      # verify the required parameter 'external_account_id' is set
      fail ArgumentError, "Missing the required parameter 'external_account_id' when calling ExternalAccountUserAttributionChannelsApi.show" if external_account_id.nil?
      # resource path
      local_var_path = "/api/v2/external_accounts/{external_account_id}/user_attribution/channel.json_api".sub('{format}','json_api').sub('{' + 'external_account_id' + '}', external_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Channel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAccountUserAttributionChannelsApi#show\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
