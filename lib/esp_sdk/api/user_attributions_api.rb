=begin
#ESP Documentation

#The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

OpenAPI spec version: v2_sdk

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ESP
  class UserAttributionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a User Attribution Channel for an external account
    # URL will only be returned in this response and will not be accessible again.
    # @param external_account_id The ID of the external account to create a User Attribution Channel for
    # @param [Hash] opts the optional parameters
    # @return [ExternalAccountUserAttributionChannel]
    def add_channel(external_account_id, opts = {})
      data, _status_code, _headers = add_channel_with_http_info(external_account_id, opts)
      return data
    end

    # Create a User Attribution Channel for an external account
    # URL will only be returned in this response and will not be accessible again.
    # @param external_account_id The ID of the external account to create a User Attribution Channel for
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalAccountUserAttributionChannel, Fixnum, Hash)>] ExternalAccountUserAttributionChannel data, response status code and response headers
    def add_channel_with_http_info(external_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserAttributionsApi.add_channel ..."
      end
      # verify the required parameter 'external_account_id' is set
      fail ArgumentError, "Missing the required parameter 'external_account_id' when calling UserAttributionsApi.add_channel" if external_account_id.nil?
      # resource path
      local_var_path = "/api/v2/external_accounts/{external_account_id}/user_attribution/channel.json_api".sub('{format}','json_api').sub('{' + 'external_account_id' + '}', external_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExternalAccountUserAttributionChannel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAttributionsApi#add_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove the User Attribution Channel for an external account
    # 
    # @param external_account_id The ID of the external account to remove the User Attribution Channel from
    # @param [Hash] opts the optional parameters
    # @return [Meta]
    def remove_channel(external_account_id, opts = {})
      data, _status_code, _headers = remove_channel_with_http_info(external_account_id, opts)
      return data
    end

    # Remove the User Attribution Channel for an external account
    # 
    # @param external_account_id The ID of the external account to remove the User Attribution Channel from
    # @param [Hash] opts the optional parameters
    # @return [Array<(Meta, Fixnum, Hash)>] Meta data, response status code and response headers
    def remove_channel_with_http_info(external_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserAttributionsApi.remove_channel ..."
      end
      # verify the required parameter 'external_account_id' is set
      fail ArgumentError, "Missing the required parameter 'external_account_id' when calling UserAttributionsApi.remove_channel" if external_account_id.nil?
      # resource path
      local_var_path = "/api/v2/external_accounts/{external_account_id}/user_attribution/channel.json_api".sub('{format}','json_api').sub('{' + 'external_account_id' + '}', external_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Meta')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAttributionsApi#remove_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show the User Attribution Channel of an external account
    # The channel url will not be returned.
    # @param external_account_id The ID of the external account to show the user attribution channel for
    # @param [Hash] opts the optional parameters
    # @return [ExternalAccountUserAttributionChannel]
    def show_channel(external_account_id, opts = {})
      data, _status_code, _headers = show_channel_with_http_info(external_account_id, opts)
      return data
    end

    # Show the User Attribution Channel of an external account
    # The channel url will not be returned.
    # @param external_account_id The ID of the external account to show the user attribution channel for
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalAccountUserAttributionChannel, Fixnum, Hash)>] ExternalAccountUserAttributionChannel data, response status code and response headers
    def show_channel_with_http_info(external_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserAttributionsApi.show_channel ..."
      end
      # verify the required parameter 'external_account_id' is set
      fail ArgumentError, "Missing the required parameter 'external_account_id' when calling UserAttributionsApi.show_channel" if external_account_id.nil?
      # resource path
      local_var_path = "/api/v2/external_accounts/{external_account_id}/user_attribution/channel.json_api".sub('{format}','json_api').sub('{' + 'external_account_id' + '}', external_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExternalAccountUserAttributionChannel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAttributionsApi#show_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the user attributions on an external account
    # 
    # @param external_account_id The ID of the external account to update the user attributions of
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  organization, sub_organization, team, scan_intervals, disabled_signatures, suppressions, azure_group See Including Objects for more information.
    # @option opts [String] :cloudtrail_name The name of the cloudetrail associated with the user attribution.
    # @return [ExternalAccount]
    def update(external_account_id, opts = {})
      data, _status_code, _headers = update_with_http_info(external_account_id, opts)
      return data
    end

    # Update the user attributions on an external account
    # 
    # @param external_account_id The ID of the external account to update the user attributions of
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  organization, sub_organization, team, scan_intervals, disabled_signatures, suppressions, azure_group See Including Objects for more information.
    # @option opts [String] :cloudtrail_name The name of the cloudetrail associated with the user attribution.
    # @return [Array<(ExternalAccount, Fixnum, Hash)>] ExternalAccount data, response status code and response headers
    def update_with_http_info(external_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserAttributionsApi.update ..."
      end
      # verify the required parameter 'external_account_id' is set
      fail ArgumentError, "Missing the required parameter 'external_account_id' when calling UserAttributionsApi.update" if external_account_id.nil?
      # resource path
      local_var_path = "/api/v2/external_accounts/{external_account_id}/user_attribution.json_api".sub('{format}','json_api').sub('{' + 'external_account_id' + '}', external_account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["cloudtrail_name"] = opts[:'cloudtrail_name'] if !opts[:'cloudtrail_name'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExternalAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAttributionsApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
