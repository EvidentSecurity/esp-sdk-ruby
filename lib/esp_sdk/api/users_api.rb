=begin
#ESP Documentation

#The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

OpenAPI spec version: v2_sdk

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ESP
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a(n) User
    # 
    # @param first_name The first name of the user
    # @param last_name The last name of the user
    # @param email The email of the user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :role_id The ID of the role of the user
    # @option opts [Array<Integer>] :sub_organization_ids A list of sub organization IDs that the user should have access to
    # @option opts [Array<Integer>] :team_ids A list of team IDs that the user should have access to
    # @option opts [BOOLEAN] :disable_daily_emails Specifies whether the daily emails should be turned off or not
    # @option opts [String] :phone The phone number of the user
    # @option opts [String] :time_zone The time zone of the user. See Time Zones for a list of valid time zones
    # @option opts [String] :include Related objects that can be included in the response:  organization, sub_organizations, teams, role See Including Objects for more information.
    # @return [User]
    def create(first_name, last_name, email, opts = {})
      data, _status_code, _headers = create_with_http_info(first_name, last_name, email, opts)
      return data
    end

    # Create a(n) User
    # 
    # @param first_name The first name of the user
    # @param last_name The last name of the user
    # @param email The email of the user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :role_id The ID of the role of the user
    # @option opts [Array<Integer>] :sub_organization_ids A list of sub organization IDs that the user should have access to
    # @option opts [Array<Integer>] :team_ids A list of team IDs that the user should have access to
    # @option opts [BOOLEAN] :disable_daily_emails Specifies whether the daily emails should be turned off or not
    # @option opts [String] :phone The phone number of the user
    # @option opts [String] :time_zone The time zone of the user. See Time Zones for a list of valid time zones
    # @option opts [String] :include Related objects that can be included in the response:  organization, sub_organizations, teams, role See Including Objects for more information.
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def create_with_http_info(first_name, last_name, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.create ..."
      end
      # verify the required parameter 'first_name' is set
      fail ArgumentError, "Missing the required parameter 'first_name' when calling UsersApi.create" if first_name.nil?
      # verify the required parameter 'last_name' is set
      fail ArgumentError, "Missing the required parameter 'last_name' when calling UsersApi.create" if last_name.nil?
      # verify the required parameter 'email' is set
      fail ArgumentError, "Missing the required parameter 'email' when calling UsersApi.create" if email.nil?
      # resource path
      local_var_path = "/api/v2/users.json_api".sub('{format}','json_api')

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["first_name"] = first_name
      form_params["last_name"] = last_name
      form_params["email"] = email
      form_params["role_id"] = opts[:'role_id'] if !opts[:'role_id'].nil?
      form_params["sub_organization_ids"] = @api_client.build_collection_param(opts[:'sub_organization_ids'], :multi) if !opts[:'sub_organization_ids'].nil?
      form_params["team_ids"] = @api_client.build_collection_param(opts[:'team_ids'], :multi) if !opts[:'team_ids'].nil?
      form_params["disable_daily_emails"] = opts[:'disable_daily_emails'] if !opts[:'disable_daily_emails'].nil?
      form_params["phone"] = opts[:'phone'] if !opts[:'phone'].nil?
      form_params["time_zone"] = opts[:'time_zone'] if !opts[:'time_zone'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a(n) User
    # The users current password is required when deleting yourself.
    # @param id  ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :current_password The user&#39;s currently stored password
    # @return [Meta]
    def delete(id, opts = {})
      data, _status_code, _headers = delete_with_http_info(id, opts)
      return data
    end

    # Delete a(n) User
    # The users current password is required when deleting yourself.
    # @param id  ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :current_password The user&#39;s currently stored password
    # @return [Array<(Meta, Fixnum, Hash)>] Meta data, response status code and response headers
    def delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.delete ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.delete" if id.nil?
      # resource path
      local_var_path = "/api/v2/users/{id}.json_api".sub('{format}','json_api').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["current_password"] = opts[:'current_password'] if !opts[:'current_password'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Meta')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Users
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :filter Filter Params for Searching.  Equality Searchable Attributes: [id, email] Matching Searchable Attribute: [email]  Sortable Attributes: [email, current_sign_in_at, updated_at, created_at, id] Searchable Associations: [role, organization, sub_organizations, teams] See Searching Lists for more information. See the filter parameter of the association&#39;s list action to see what attributes are searchable on each association. See Conditions on Relationships in Searching Lists for more information.
    # @option opts [String] :page Page Number and Page Size.  number is the page number of the collection to return, size is the number of items to return per page (default to {:number=>1,+:size=>20})
    # @option opts [String] :include Related objects that can be included in the response:  organization, sub_organizations, teams, role See Including Objects for more information.
    # @return [PaginatedCollection]
    def list(opts = {})
      data, _status_code, _headers = list_with_http_info(opts)
      return data
    end

    # Get a list of Users
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :filter Filter Params for Searching.  Equality Searchable Attributes: [id, email] Matching Searchable Attribute: [email]  Sortable Attributes: [email, current_sign_in_at, updated_at, created_at, id] Searchable Associations: [role, organization, sub_organizations, teams] See Searching Lists for more information. See the filter parameter of the association&#39;s list action to see what attributes are searchable on each association. See Conditions on Relationships in Searching Lists for more information.
    # @option opts [String] :page Page Number and Page Size.  number is the page number of the collection to return, size is the number of items to return per page
    # @option opts [String] :include Related objects that can be included in the response:  organization, sub_organizations, teams, role See Including Objects for more information.
    # @return [Array<(PaginatedCollection, Fixnum, Hash)>] PaginatedCollection data, response status code and response headers
    def list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.list ..."
      end
      # resource path
      local_var_path = "/api/v2/users.json_api".sub('{format}','json_api')

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["filter"] = opts[:'filter'] if !opts[:'filter'].nil?
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show a single User
    # 
    # @param id User ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  organization, sub_organizations, teams, role See Including Objects for more information.
    # @return [User]
    def show(id, opts = {})
      data, _status_code, _headers = show_with_http_info(id, opts)
      return data
    end

    # Show a single User
    # 
    # @param id User ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects that can be included in the response:  organization, sub_organizations, teams, role See Including Objects for more information.
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def show_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.show ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.show" if id.nil?
      # resource path
      local_var_path = "/api/v2/users/{id}.json_api".sub('{format}','json_api').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#show\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a(n) User
    # 
    # @param id User ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :first_name The first name of the user
    # @option opts [String] :last_name The last name of the user
    # @option opts [String] :email The email of the user
    # @option opts [Integer] :role_id The ID of the role of the user
    # @option opts [Array<Integer>] :sub_organization_ids A list of sub organization IDs that the user should have access to
    # @option opts [Array<Integer>] :team_ids A list of team IDs that the user should have access to
    # @option opts [BOOLEAN] :disable_daily_emails Specifies whether the daily emails should be turned off or not
    # @option opts [String] :phone The phone number of the user
    # @option opts [String] :time_zone The time zone of the user. See Time Zones for a list of valid time zones
    # @option opts [String] :include Related objects that can be included in the response:  organization, sub_organizations, teams, role See Including Objects for more information.
    # @return [User]
    def update(id, opts = {})
      data, _status_code, _headers = update_with_http_info(id, opts)
      return data
    end

    # Update a(n) User
    # 
    # @param id User ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :first_name The first name of the user
    # @option opts [String] :last_name The last name of the user
    # @option opts [String] :email The email of the user
    # @option opts [Integer] :role_id The ID of the role of the user
    # @option opts [Array<Integer>] :sub_organization_ids A list of sub organization IDs that the user should have access to
    # @option opts [Array<Integer>] :team_ids A list of team IDs that the user should have access to
    # @option opts [BOOLEAN] :disable_daily_emails Specifies whether the daily emails should be turned off or not
    # @option opts [String] :phone The phone number of the user
    # @option opts [String] :time_zone The time zone of the user. See Time Zones for a list of valid time zones
    # @option opts [String] :include Related objects that can be included in the response:  organization, sub_organizations, teams, role See Including Objects for more information.
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def update_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.update ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.update" if id.nil?
      # resource path
      local_var_path = "/api/v2/users/{id}.json_api".sub('{format}','json_api').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}
      form_params["first_name"] = opts[:'first_name'] if !opts[:'first_name'].nil?
      form_params["last_name"] = opts[:'last_name'] if !opts[:'last_name'].nil?
      form_params["email"] = opts[:'email'] if !opts[:'email'].nil?
      form_params["role_id"] = opts[:'role_id'] if !opts[:'role_id'].nil?
      form_params["sub_organization_ids"] = @api_client.build_collection_param(opts[:'sub_organization_ids'], :multi) if !opts[:'sub_organization_ids'].nil?
      form_params["team_ids"] = @api_client.build_collection_param(opts[:'team_ids'], :multi) if !opts[:'team_ids'].nil?
      form_params["disable_daily_emails"] = opts[:'disable_daily_emails'] if !opts[:'disable_daily_emails'].nil?
      form_params["phone"] = opts[:'phone'] if !opts[:'phone'].nil?
      form_params["time_zone"] = opts[:'time_zone'] if !opts[:'time_zone'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
