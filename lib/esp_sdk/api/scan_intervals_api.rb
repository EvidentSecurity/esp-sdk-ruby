=begin
#ESP Documentation

#No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ESP
  class ScanIntervalsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a(n) Scan Interval
    # 
    # @param external_account_id The ID of the external account this scan interval is for
    # @param interval The interval, in minutes, this service will be scanned
    # @param service_id The service ID this scan interval is for
    # @param [Hash] opts the optional parameters
    # @return [ScanInterval]
    def create(external_account_id, interval, service_id, opts = {})
      data, _status_code, _headers = create_with_http_info(external_account_id, interval, service_id, opts)
      return data
    end

    # Create a(n) Scan Interval
    # 
    # @param external_account_id The ID of the external account this scan interval is for
    # @param interval The interval, in minutes, this service will be scanned
    # @param service_id The service ID this scan interval is for
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScanInterval, Fixnum, Hash)>] ScanInterval data, response status code and response headers
    def create_with_http_info(external_account_id, interval, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ScanIntervalsApi.create ..."
      end
      # verify the required parameter 'external_account_id' is set
      fail ArgumentError, "Missing the required parameter 'external_account_id' when calling ScanIntervalsApi.create" if external_account_id.nil?
      # verify the required parameter 'interval' is set
      fail ArgumentError, "Missing the required parameter 'interval' when calling ScanIntervalsApi.create" if interval.nil?
      # verify the required parameter 'service_id' is set
      fail ArgumentError, "Missing the required parameter 'service_id' when calling ScanIntervalsApi.create" if service_id.nil?
      # resource path
      local_var_path = "/api/v2/scan_intervals.json_api".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["external_account_id"] = external_account_id
      form_params["interval"] = interval
      form_params["service_id"] = service_id

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScanInterval')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanIntervalsApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a(n) Scan Interval
    # 
    # @param id Scan Interval Id
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def destroy(id, opts = {})
      data, _status_code, _headers = destroy_with_http_info(id, opts)
      return data
    end

    # Remove a(n) Scan Interval
    # 
    # @param id Scan Interval Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def destroy_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ScanIntervalsApi.destroy ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ScanIntervalsApi.destroy" if id.nil?
      # resource path
      local_var_path = "/api/v2/scan_intervals/{id}.json_api".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanIntervalsApi#destroy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Scan Intervals
    # 
    # @param external_account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :page Page Number
    # @option opts [Hash<String, String>] :filter Filter Params for Searching
    # @option opts [String] :include Included Objects
    # @return [PaginatedCollection]
    def list(external_account_id, opts = {})
      data, _status_code, _headers = list_with_http_info(external_account_id, opts)
      return data
    end

    # Get a list of Scan Intervals
    # 
    # @param external_account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :page Page Number
    # @option opts [Hash<String, String>] :filter Filter Params for Searching
    # @option opts [String] :include Included Objects
    # @return [Array<(PaginatedCollection, Fixnum, Hash)>] PaginatedCollection data, response status code and response headers
    def list_with_http_info(external_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ScanIntervalsApi.list ..."
      end
      # verify the required parameter 'external_account_id' is set
      fail ArgumentError, "Missing the required parameter 'external_account_id' when calling ScanIntervalsApi.list" if external_account_id.nil?
      # resource path
      local_var_path = "/api/v2/external_accounts/{external_account_id}/scan_intervals.json_api".sub('{format}','json').sub('{' + 'external_account_id' + '}', external_account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?
      form_params["filter"] = opts[:'filter'] if !opts[:'filter'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanIntervalsApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show a single Scan Interval
    # 
    # @param id Scan Interval Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Included Objects
    # @return [ScanInterval]
    def show(id, opts = {})
      data, _status_code, _headers = show_with_http_info(id, opts)
      return data
    end

    # Show a single Scan Interval
    # 
    # @param id Scan Interval Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Included Objects
    # @return [Array<(ScanInterval, Fixnum, Hash)>] ScanInterval data, response status code and response headers
    def show_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ScanIntervalsApi.show ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ScanIntervalsApi.show" if id.nil?
      # resource path
      local_var_path = "/api/v2/scan_intervals/{id}.json_api".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScanInterval')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanIntervalsApi#show\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a(n) Scan Interval
    # 
    # @param id Scan Interval Id
    # @param external_account_id The ID of the external account this scan interval is for
    # @param interval The interval, in minutes, this service will be scanned
    # @param service_id The service ID this scan interval is for
    # @param [Hash] opts the optional parameters
    # @return [ScanInterval]
    def update(id, external_account_id, interval, service_id, opts = {})
      data, _status_code, _headers = update_with_http_info(id, external_account_id, interval, service_id, opts)
      return data
    end

    # Update a(n) Scan Interval
    # 
    # @param id Scan Interval Id
    # @param external_account_id The ID of the external account this scan interval is for
    # @param interval The interval, in minutes, this service will be scanned
    # @param service_id The service ID this scan interval is for
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScanInterval, Fixnum, Hash)>] ScanInterval data, response status code and response headers
    def update_with_http_info(id, external_account_id, interval, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ScanIntervalsApi.update ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ScanIntervalsApi.update" if id.nil?
      # verify the required parameter 'external_account_id' is set
      fail ArgumentError, "Missing the required parameter 'external_account_id' when calling ScanIntervalsApi.update" if external_account_id.nil?
      # verify the required parameter 'interval' is set
      fail ArgumentError, "Missing the required parameter 'interval' when calling ScanIntervalsApi.update" if interval.nil?
      # verify the required parameter 'service_id' is set
      fail ArgumentError, "Missing the required parameter 'service_id' when calling ScanIntervalsApi.update" if service_id.nil?
      # resource path
      local_var_path = "/api/v2/scan_intervals/{id}.json_api".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["external_account_id"] = external_account_id
      form_params["interval"] = interval
      form_params["service_id"] = service_id

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScanInterval')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanIntervalsApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
