=begin
#ESP Documentation

#This is a description

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

# load the gem
require 'esp_sdk'
# Requiring factory girl also requires active support
# which could lead to using active support methods
# in the code that tests will not catch.
# Use factory girl to generate json data then create helper with that data.
# require 'factory_girl'
require 'webmock/rspec'

ENV['ESP_ENV']               = 'test'
ENV['ESP_ACCESS_KEY_ID']     ||= 'abc'
ENV['ESP_SECRET_ACCESS_KEY'] ||= '123'

# The following  was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # factory girl helper to form the correct object when getting a collection of objects
  def json_list(*args)
    page_args        = args.last.delete(:page) if !args.last.nil? && args.last.is_a?(Hash)
    page_args        ||= { number: 1, size: 20 }
    json_array       = args.first == :empty ? [] : args.first
    data             = json_array.map { |j| JSON.parse(j)['data'] }
    links            = build_links(data, page_args)
    list             = { 'data'  => data.slice(0, page_args[:size]),
                         "links" => links }
    list['included'] = JSON.parse(json_array.first)['included'] unless json_array.first.nil?
    list.to_json
  end

  def active_record_error_response
    { "errors" => [{ "status" => "401", "title" => "Name can't be blank", "meta" => { "name" => "can't be blank" } }, { "status" => "401", "title" => "Name is invalid", "meta" => { "name" => "is invalid" } }, { "status" => "401", "title" => "Description can't be blank", "meta" => { "description" => "can't be blank" } }] }.to_json
  end

  def alert_response
    {"data"=>{"id"=>"1019", "type"=>"alerts", "attributes"=>{"created_at"=>"2018-03-15T19:29:33.678Z", "status"=>"fail", "risk_level"=>"high", "resource"=>"resource-6", "ended_reason"=>nil, "replaced_by_id"=>nil, "replaced_by_status"=>nil, "updated_at"=>"2018-03-15T19:29:33.678Z", "started_at"=>"2018-03-15T19:28:33.000Z", "ended_at"=>nil}, "relationships"=>{"external_account"=>{"data"=>{"id"=>"1", "type"=>"external_accounts"}, "links"=>{"related"=>"http://test.host/api/v2/external_accounts/1.json"}}, "region"=>{"data"=>{"id"=>"1018", "type"=>"regions"}, "links"=>{"related"=>"http://test.host/api/v2/regions/1018.json"}}, "signature"=>{"data"=>{"id"=>"1", "type"=>"signatures"}, "links"=>{"related"=>"http://test.host/api/v2/signatures/1.json"}}, "custom_signature"=>{"data"=>nil, "links"=>{"related"=>nil}}, "suppression"=>{"data"=>{"id"=>"1017", "type"=>"suppressions"}, "links"=>{"related"=>"http://test.host/api/v2/suppressions/1017.json"}}, "metadata"=>{"links"=>{"related"=>"http://test.host/api/v2/alerts/1019/metadata.json"}}, "attribution"=>{"data"=>{"id"=>"1015", "type"=>"attributions"}, "links"=>{"related"=>"http://test.host/api/v2/alerts/1019/attribution.json"}}, "cloud_trail_events"=>{"links"=>{"related"=>"http://test.host/api/v2/alerts/1019/cloud_trail_events.json"}}, "tags"=>{"data"=>[{"id"=>"", "type"=>"tags"}, {"id"=>"", "type"=>"tags"}], "links"=>{"related"=>"http://test.host/api/v2/alerts/1019/tags.json"}}, "compliance_controls"=>{"data"=>[{"id"=>"1", "type"=>"compliance_controls"}], "links"=>{"related"=>"http://test.host/api/v2/alerts/1019/compliance_controls.json"}}, "custom_compliance_controls"=>{"links"=>{"related"=>"http://test.host/api/v2/alerts/1019/custom_compliance_controls.json"}}}}, "included"=>[{"id"=>"1", "type"=>"external_accounts", "attributes"=>{"created_at"=>"2018-03-15T19:29:33.000Z", "name"=>"Amazon Account 3", "updated_at"=>"2018-03-15T19:29:33.000Z", "provider"=>"amazon", "arn"=>"arn:aws:iam::3768:role/test_sts_role", "account"=>"3768", "external_id"=>"test_sts_external_id_1", "cloudtrail_name"=>nil}, "relationships"=>{"organization"=>{"links"=>{"related"=>"http://test.host/api/v2/organizations/3.json"}}, "sub_organization"=>{"links"=>{"related"=>"http://test.host/api/v2/sub_organizations/3.json"}}, "team"=>{"data"=>{"id"=>"3", "type"=>"teams"}, "links"=>{"related"=>"http://test.host/api/v2/teams/3.json"}}, "scan_intervals"=>{"links"=>{"related"=>"http://test.host/api/v2/external_accounts/1/scan_intervals.json"}}, "disabled_signatures"=>{"links"=>{"related"=>"http://test.host/api/v2/external_accounts/1/disabled_signatures.json"}}, "suppressions"=>{"links"=>{"related"=>"http://test.host/api/v2/suppressions.json?filter%5Bexternal_accounts_id_eq%5D=1"}}, "credentials"=>{"links"=>{"related"=>"http://test.host/api/v2/external_accounts/1/amazon.json"}}}}, {"id"=>"3", "type"=>"teams", "attributes"=>{"name"=>"Operations 3", "created_at"=>"2018-03-15T19:29:33.000Z", "updated_at"=>"2018-03-15T19:29:33.000Z"}, "relationships"=>{"custom_signatures"=>{"links"=>{"related"=>"http://test.host/api/v2/custom_signatures.json?filter%5Bteam_id_eq%5D=3"}}, "external_accounts"=>{"links"=>{"related"=>"http://test.host/api/v2/external_accounts.json?filter%5Bteam_id_eq%5D=3"}}, "organization"=>{"links"=>{"related"=>"http://test.host/api/v2/organizations/3.json"}}, "sub_organization"=>{"data"=>{"id"=>"3", "type"=>"sub_organizations"}, "links"=>{"related"=>"http://test.host/api/v2/sub_organizations/3.json"}}}}, {"id"=>"3", "type"=>"sub_organizations", "attributes"=>{"name"=>"IT Department 3", "created_at"=>"2018-03-15T19:29:33.000Z", "updated_at"=>"2018-03-15T19:29:33.000Z"}, "relationships"=>{"external_accounts"=>{"links"=>{"related"=>"http://test.host/api/v2/external_accounts.json?filter%5Bsub_organization_id_eq%5D=3"}}, "organization"=>{"links"=>{"related"=>"http://test.host/api/v2/organizations/3.json"}}, "teams"=>{"links"=>{"related"=>"http://test.host/api/v2/teams.json?filter%5Bsub_organization_id_eq%5D=3"}}}}, {"id"=>"1018", "type"=>"regions", "attributes"=>{"code"=>"us_east_test_7", "name"=>nil, "created_at"=>"2018-03-15T19:29:34.213Z", "updated_at"=>"2018-03-15T19:29:34.213Z", "provider"=>"amazon"}}, {"id"=>"1", "type"=>"signatures", "attributes"=>{"created_at"=>"2018-03-15T19:29:33.000Z", "description"=>"[url](Some) description for *some* test", "identifier"=>"AWS:EC2-004", "name"=>"Signature 4", "resolution"=>"Turn on some setting", "risk_level"=>"high", "updated_at"=>"2018-03-15T19:29:33.000Z"}, "relationships"=>{"service"=>{"links"=>{"related"=>"http://test.host/api/v2/services/4.json"}}, "disabled_external_accounts"=>{"links"=>{"related"=>"http://test.host/api/v2/signatures/1/disabled_external_accounts.json"}}, "suppressions"=>{"links"=>{"related"=>"http://test.host/api/v2/suppressions.json?filter%5Bsignatures_id_eq%5D=1"}}}}, {"id"=>"1017", "type"=>"suppressions", "attributes"=>{"created_at"=>"2018-03-15T19:29:34.215Z", "reason"=>"No me gusta", "resource"=>nil, "suppression_type"=>nil, "status"=>"active", "updated_at"=>"2018-03-15T19:29:34.215Z"}, "relationships"=>{"organization"=>{"links"=>{"related"=>"http://test.host/api/v2/organizations/7.json"}}, "created_by"=>{"links"=>{"related"=>"http://test.host/api/v2/users/1016.json"}}, "regions"=>{"links"=>{"related"=>"http://test.host/api/v2/regions.json?filter%5Bsuppressions_id_eq%5D=1017"}}, "external_accounts"=>{"links"=>{"related"=>"http://test.host/api/v2/external_accounts.json?filter%5Bsuppressions_id_eq%5D=1017"}}, "signatures"=>{"links"=>{"related"=>"http://test.host/api/v2/signatures.json?filter%5Bsuppressions_id_eq%5D=1017"}}, "custom_signatures"=>{"links"=>{"related"=>"http://test.host/api/v2/custom_signatures.json?filter%5Bsuppressions_id_eq%5D=1017"}}}}, {"id"=>"1015", "type"=>"attributions", "attributes"=>{"event_id"=>"1", "event_name"=>"1", "event_time"=>"2018-03-15T19:29:33.000Z", "raw_event"=>{"sdk_integration_tests"=>"event data"}, "user"=>"arn:aws:iam::34234234234:user/johndoe", "ip_address"=>"123.0.0.123", "scope_name"=>"agent123"}, "relationships"=>{"alert"=>{"links"=>{"related"=>"http://test.host/api/v2/alerts/1019.json"}}}}, {"id"=>"1", "type"=>"tags", "attributes"=>{"key"=>"Name", "value"=>"abc123", "created_at"=>"2018-03-15T19:29:33.000Z", "updated_at"=>"2018-03-15T19:29:33.000Z"}}, {"id"=>"1", "type"=>"compliance_controls", "attributes"=>{"created_at"=>"2018-03-15T19:29:33.000Z", "name"=>"Control name 1", "identifier"=>"Control identifier 1", "description"=>"Standard description 1", "updated_at"=>"2018-03-15T19:29:33.000Z", "position"=>1}, "relationships"=>{"compliance_standard"=>{"links"=>{"related"=>"http://test.host/api/v2/compliance_standards/1.json"}}, "compliance_domain"=>{"links"=>{"related"=>"http://test.host/api/v2/compliance_domains/1.json"}}, "signatures"=>{"links"=>{"related"=>"http://test.host/api/v2/compliance_controls/1/signatures.json"}}}}]}.to_json
  end

  def organization_response
    { "included" => nil, "data" => { "id" => 1, "type" => "organizations", "relationships" => { "sub_organizations" => { "data" => [{ "type" => "sub_organizations", "id" => "24" }, { "type" => "sub_organizations", "id" => "2" }], "links" => { "related" => "http://localhost:3000/api/v2/sub_organizations.json?filter%5Borganization_id_eq%5D=2" } }, "teams" => { "data" => [{ "type" => "teams", "id" => "2" }, { "type" => "teams", "id" => "20" }, { "type" => "teams", "id" => "21" }], "links" => { "related" => "http://localhost:3000/api/v2/teams.json?filter%5Borganization_id_eq%5D=2" } } }, "attributes" => { "created_at" => "2017-03-13 11:44:31 -0400", "name" => "Test Org", "updated_at" => "2017-03-13 11:44:31 -0400" } } }.to_json
  end

  def enable_live_calls
    before(:each) do
      ESP.configure { |c| c.host = 'localhost:3000' }
      WebMock.allow_net_connect!
    end

    after(:each) do
      WebMock.disable_net_connect!
    end
  end

  private

  def build_links(data, page)
    current_page = page[:number]
    last_page    = (data.count.to_f / page[:size]).ceil
    { "self" => "http://localhost:3000/api/v2/not_the_real_url/but_useful_for_testing.json?page%5Bnumber%5D=#{current_page}&page%5Bsize%5D=#{page[:size]}" }.tap do |links|
      links["prev"] = "http://localhost:3000/api/v2/not_the_real_url/but_useful_for_testing.json?page%5Bnumber%5D=#{current_page - 1}&page%5Bsize%5D=#{page[:size]}" unless current_page == 1
      unless current_page == last_page
        links["next"] = "http://localhost:3000/api/v2/not_the_real_url/but_useful_for_testing.json?page%5Bnumber%5D=#{current_page + 1}&page%5Bsize%5D=#{page[:size]}"
        links["last"] = "http://localhost:3000/api/v2/not_the_real_url/but_useful_for_testing.json?page%5Bnumber%5D=#{last_page}&page%5Bsize%5D=#{page[:size]}"
      end
    end
  end

  # The settings below are suggested to provide a good initial experience
  # with RSpec, but feel free to customize to your heart's content.
=begin
  # These two settings work together to allow you to limit a spec run
  # to individual examples or groups you care about by tagging them with
  # `:focus` metadata. When nothing is tagged with `:focus`, all examples
  # get run.
  config.filter_run :focus
  config.run_all_when_everything_filtered = true

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/
  #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
  #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode
  config.disable_monkey_patching!

  # This setting enables warnings. It's recommended, but in some cases may
  # be too noisy due to issues in dependencies.
  config.warnings = true

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = 'doc'
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
=end
end
